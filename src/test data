# orldordervieset


// src/utils/apiServer.js
import axios from "axios";
import API_ROUTES from "../apiRoutes";

const axiosInstance = axios.create({
  baseURL: "http://localhost:8000",
  timeout: 10000,
  withCredentials: true,
});

// ‚úÖ Public endpoints jahan token kabhi nahi bhejna
const PUBLIC_ENDPOINTS = [
 
  API_ROUTES.LOGIN,
  API_ROUTES.REGISTER,
  API_ROUTES.FORGOTPASSWORD,
  API_ROUTES.RESETPASSWORDCONFRIM,
  API_ROUTES.CITIES,
  API_ROUTES.REGIONS,
  API_ROUTES.EVENTS,
  API_ROUTES.TOURIST_PLACES,
  API_ROUTES.RESTAURANTS,
  // API_ROUTES.PRODUCTS,
  // API_ROUTES.PRODUCT_CATEGORIES,
];


// Request interceptor
axiosInstance.interceptors.request.use(
  (config) => {
    const storedData = localStorage.getItem("userData");
    const parsedData = storedData ? JSON.parse(storedData) : null;
    const token = parsedData?.token || null;

    // ‚úÖ Agar request public hai ‚Üí token mat bhejo
    const isPublic = PUBLIC_ENDPOINTS.some((url) =>
      config.url.startsWith(url)
    );

    if (!isPublic && token) {
      config.headers["Authorization"] = `Bearer ${token}`;
        console.log(
        `üîê Protected Request ‚Üí ${config.url}`,
        "Token attached ‚úÖ"
      );
    }  else {
      console.log(
        `üåç Public Request ‚Üí ${config.url}`,
        "No token attached üö´"
      );
    }

    if (config.method && config.method.toUpperCase() !== "GET") {
      config.headers["Content-Type"] = "application/json";
    }

    return config;
  },
  (error) => {
    console.error("Request interceptor error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error(
      `‚ùå ${error.config?.method?.toUpperCase()} ${error.config?.url}:`,
      {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message,
      }
    );
    return Promise.reject(error);
  }
);

// Main apiServer function
const apiServer = async (url, method = "GET", data = {}) => {
  try {
    const config = {
      method: method.toUpperCase(),
      url,
    };

    if (method.toUpperCase() !== "GET" && data) {
      config.data = data;
    }

    console.log(
      `üîÑ Making ${method.toUpperCase()} request to ${url}`,
      data ? { data } : ""
    );

    const response = await axiosInstance(config);

    const responseData = response.data;

    if (responseData && typeof responseData.error !== "undefined") {
      return {
        error: responseData.error,
        message:
          responseData.message ||
          (responseData.error ? "An error occurred" : "Success"),
        data: responseData.data || responseData,
        status: response.status,
      };
    }

    return {
      error: false,
      message: "Success",
      data: responseData,
      status: response.status,
    };
  } catch (err) {
    console.error("‚ùå API Error Details:", {
      url,
      method,
      status: err.response?.status,
      statusText: err.response?.statusText,
      responseData: err.response?.data,
      requestData: data,
      message: err.message,
    });

    if (err.response) {
      const errorData = err.response.data;

      return {
        error: true,
        message:
          errorData?.message ||
          errorData?.detail ||
          errorData?.error ||
          `Server Error (${err.response.status})`,
        status: err.response.status,
        data: errorData || {},
      };
    } else if (err.request) {
      return {
        error: true,
        message: "Network error. Please check your internet connection.",
        status: 0,
        data: {},
      };
    } else {
      return {
        error: true,
        message: err.message || "Something went wrong",
        status: 0,
        data: {},
      };
    }
  }
};

export default apiServer;

# üîπ Order CRUD (CORRECTED VERSION)
class OrderViewSet(viewsets.ModelViewSet):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        # ‚úÖ Fixed: Use 'user' and 'owner' fields correctly
        buyer_orders = Order.objects.filter(user=user)  # Orders made by user
        seller_orders = Order.objects.filter(owner=user)  # Orders for user's products
        return buyer_orders.union(seller_orders).order_by("-created_at")
    
    def create(self, request, *args, **kwargs):
        """Override create method to handle order creation with proper response"""
        try:
            # Check if cart exists and has items
            cart = Cart.objects.filter(user=request.user).first()
            if not cart or cart.items.count() == 0:
                return Response(
                    {
                        "error": True,
                        "message": "Cart is empty",
                        "detail": "Your cart is empty. Please add items before checkout."
                    }, 
                    status=status.HTTP_400_BAD_REQUEST
                )

            # ‚úÖ Get seller from first item
            first_item = cart.items.first()
            if not first_item or not first_item.product or not first_item.product.owner:
                return Response(
                    {
                        "error": True,
                        "message": "Invalid cart items",
                        "detail": "Cart contains items with invalid seller information."
                    },
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            seller = first_item.product.owner
            
            # ‚úÖ Calculate total
            total_amount = cart.grand_total

            # ‚úÖ Extract customer details from request
            full_name = request.data.get("full_name")
            email = request.data.get("email")
            phone = request.data.get("phone")
            address_line1 = request.data.get("address_line1")
            address_line2 = request.data.get("address_line2", "")
            city = request.data.get("city")
            country = request.data.get("country", "Pakistan")

            # Validate required fields
            required_fields = {
                'full_name': full_name,
                'email': email,
                'phone': phone,
                'address_line1': address_line1,
                'city': city
            }
            
            missing_fields = [field for field, value in required_fields.items() if not value or not value.strip()]
            if missing_fields:
                return Response(
                    {
                        "error": True,
                        "message": "Missing required fields",
                        "detail": f"Please provide: {', '.join(missing_fields)}"
                    },
                    status=status.HTTP_400_BAD_REQUEST
                )

            # ‚úÖ Create order
            order = Order.objects.create(
                user=request.user,
                owner=seller,
                full_name=full_name.strip(),
                email=email.strip().lower(),
                phone=phone.strip(),
                address_line1=address_line1.strip(),
                address_line2=address_line2.strip() if address_line2 else "",
                city=city.strip(),
                country=country.strip(),
                payment_method="COD",
                status="Pending",
                total_price=total_amount
            )

            # ‚úÖ Create order items
            order_items_created = 0
            for item in cart.items.all():
                if item.product:  # Ensure product exists
                    effective_price = item.product.discount_price or item.product.price
                    OrderItem.objects.create(
                        order=order,
                        product=item.product,
                        quantity=item.quantity,
                        price=effective_price,
                        subtotal=effective_price * item.quantity
                    )
                    order_items_created += 1

            # ‚úÖ Clear cart after successful order creation
            cart.items.all().delete()

            # üì© Send email to seller (don't fail order if email fails)
            email_sent = False
            try:
                if seller.email:
                    subject = f"New Order Received - GB Green Guide #{order.id}"
                    message = f"""
Dear {seller.first_name or seller.username},

You have received a new order!

Order Details:
- Order ID: #{order.id}
- Customer: {request.user.first_name or request.user.username}
- Total Amount: Rs. {order.total_price}
- Customer Phone: {order.phone}
- Customer Email: {order.email}

Shipping Address:
{order.full_name}
{order.address_line1}
{order.address_line2 + ', ' if order.address_line2 else ''}{order.city}, {order.country}

Please contact the customer to confirm and arrange delivery.

Best regards,
GB Green Guide Team
                    """
                    send_mail(
                        subject, 
                        message, 
                        settings.DEFAULT_FROM_EMAIL, 
                        [seller.email],
                        fail_silently=True
                    )
                    email_sent = True
                    print(f"Order notification email sent to {seller.email}")
            except Exception as e:
                print(f"Failed to send order notification email: {e}")

            # ‚úÖ Return success response with order data
            order_data = OrderSerializer(order).data
            
            return Response({
                "error": False,
                "message": "Order placed successfully!",
                "data": order_data,
                "email_sent": email_sent,
                "items_count": order_items_created
            }, status=status.HTTP_201_CREATED)

        except Exception as e:
            print(f"Order creation error: {str(e)}")
            return Response({
                "error": True,
                "message": "Failed to create order",
                "detail": str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def perform_create(self, serializer):
        # This method is no longer used since we override create()
        # Keep it empty for compatibility
        pass

    @action(detail=True, methods=["post"], url_path="confirm")
    def confirm_order(self, request, pk=None):
        order = self.get_object()
        # ‚úÖ Check if current user is the seller (owner)
        if order.owner != request.user:
            return Response(
                {"detail": "Not authorized to confirm this order"}, 
                status=status.HTTP_403_FORBIDDEN
            )
        
        order.status = "Confirmed"
        order.save()
        
        # Optional: Send confirmation email to buyer
        try:
            if order.email:
                subject = f"Order Confirmed - GB Green Guide #{order.id}"
                message = f"""
Dear {order.full_name},

Your order #{order.id} has been confirmed by the seller!

The seller will contact you soon to arrange delivery.

Order Total: Rs. {order.total_price}

Thank you for shopping with GB Green Guide!

Best regards,
GB Green Guide Team
                """
                send_mail(
                    subject,
                    message,
                    settings.DEFAULT_FROM_EMAIL,
                    [order.email],
                    fail_silently=True
                )
        except Exception as e:
            print(f"Failed to send confirmation email: {e}")
        
        return Response(OrderSerializer(order).data)

    @action(detail=False, methods=["get"], url_path="my_orders")
    def my_orders(self, request):
        """Get orders where current user is the buyer"""
        orders = Order.objects.filter(user=request.user).order_by("-created_at")
        page = self.paginate_queryset(orders)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)
        serializer = self.get_serializer(orders, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=["get"], url_path="seller_orders")
    def seller_orders(self, request):
        """Get orders for current user's products"""
        orders = Order.objects.filter(owner=request.user).order_by("-created_at")
        page = self.paginate_queryset(orders)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)
        serializer = self.get_serializer(orders, many=True)
        return Response(serializer.data)
# orldorderviewset

// oldviws
# views.py
from rest_framework import viewsets, filters, status
from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly
from django_filters.rest_framework import DjangoFilterBackend
from django_filters import rest_framework as django_filters
from rest_framework.decorators import action
from rest_framework.response import Response

from .models import Product, ProductCategory, Cart, CartItem, Order, OrderItem
from .serializers import ProductSerializer, ProductCategorySerializer, CartSerializer, CartItemSerializer, OrderSerializer
from Business.permissions import IsOwnerOrReadOnly, IsBusinessOwner
from django.db.models import F, ExpressionWrapper, DecimalField

# üì© Email
from django.core.mail import send_mail
from django.conf import settings


# üîπ Product Filters
class ProductFilter(django_filters.FilterSet):
    min_price = django_filters.NumberFilter(field_name="price", lookup_expr="gte")
    max_price = django_filters.NumberFilter(field_name="price", lookup_expr="lte")
    min_discount = django_filters.NumberFilter(method="filter_min_discount")

    class Meta:
        model = Product
        fields = ["city", "category", "is_available"]

    def filter_min_discount(self, queryset, name, value):
        queryset = queryset.annotate(
            discount_percent=ExpressionWrapper(
                (F("price") - F("discount_price")) * 100.0 / F("price"),
                output_field=DecimalField()
            )
        )
        return queryset.filter(discount_percent__gte=value)


# üîπ Category CRUD
class ProductCategoryViewSet(viewsets.ModelViewSet):
    queryset = ProductCategory.objects.all().order_by("name")
    serializer_class = ProductCategorySerializer
    permission_classes = [IsAuthenticatedOrReadOnly]


# üîπ Product CRUD
class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all().order_by("-created_at")
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    filter_backends = [
        filters.SearchFilter,
        DjangoFilterBackend,
        filters.OrderingFilter
    ]
    search_fields = ["name", "description", "category__name", "city__name"]
    filterset_class = ProductFilter
    ordering_fields = ["created_at", "price", "discount_price"]
    ordering = ["-created_at"]

    def get_permissions(self):
        if self.action == "create":
            return [IsBusinessOwner()]
        if self.action in ["update", "partial_update", "destroy"]:
            return [IsAuthenticated(), IsOwnerOrReadOnly()]
        if self.action == "my_products":
            return [IsAuthenticated()]
        return super().get_permissions()

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)

    @action(detail=False, methods=["get"], url_path="my_products")
    def my_products(self, request):
        qs = self.get_queryset().filter(owner=request.user)
        page = self.paginate_queryset(qs)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)
        serializer = self.get_serializer(qs, many=True)
        return Response(serializer.data)


# üîπ Cart CRUD
class CartViewSet(viewsets.ModelViewSet):
    serializer_class = CartSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Cart.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    @action(detail=False, methods=["post"], url_path="add")
    def add_to_cart(self, request):
        product_id = request.data.get("product_id")
        quantity = int(request.data.get("quantity", 1))

        cart, _ = Cart.objects.get_or_create(user=request.user)
        item, created = CartItem.objects.get_or_create(cart=cart, product_id=product_id)
        if not created:
            item.quantity += quantity
        else:
            item.quantity = quantity
        item.save()

        return Response(CartSerializer(cart).data, status=status.HTTP_200_OK)

    @action(detail=False, methods=["post"], url_path="remove")
    def remove_from_cart(self, request):
        product_id = request.data.get("product_id")
        cart = Cart.objects.filter(user=request.user).first()
        if not cart:
            return Response({"detail": "Cart not found"}, status=status.HTTP_404_NOT_FOUND)

        CartItem.objects.filter(cart=cart, product_id=product_id).delete()
        return Response(CartSerializer(cart).data, status=status.HTTP_200_OK)

    @action(detail=False, methods=["post"], url_path="clear")
    def clear_cart(self, request):
        cart = Cart.objects.filter(user=request.user).first()
        if cart:
            cart.items.all().delete()
        return Response({"detail": "Cart cleared"}, status=status.HTTP_200_OK)


# üîπ Order CRUD
class OrderViewSet(viewsets.ModelViewSet):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        buyer_orders = Order.objects.filter(buyer=user)
        seller_orders = Order.objects.filter(seller=user)
        return buyer_orders.union(seller_orders).order_by("-created_at")

    def perform_create(self, serializer):
        cart = Cart.objects.filter(user=self.request.user).first()
        if not cart or cart.items.count() == 0:
            raise ValueError("Cart is empty")

        seller = cart.items.first().product.owner
        order = serializer.save(
            buyer=self.request.user,
            seller=seller,
            payment_method="COD",
            status="pending",
            total_amount=cart.grand_total
        )

        for item in cart.items.all():
            OrderItem.objects.create(
                order=order,
                product=item.product,
                quantity=item.quantity,
                price=item.total_price
            )

        # ‚úÖ Cart clear
        cart.items.all().delete()

        # üì© Seller ko email bhejna
        if seller.email:
            subject = "New Order Received"
            message = f"Dear {seller.username},\n\nYour product(s) have been ordered by {self.request.user.username}.\nOrder ID: {order.id}\nTotal Amount: {order.total_amount}\n\nPlease check your dashboard for details."
            send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [seller.email])

    @action(detail=True, methods=["post"], url_path="confirm")
    def confirm_order(self, request, pk=None):
        order = self.get_object()
        if order.seller != request.user:
            return Response({"detail": "Not allowed"}, status=status.HTTP_403_FORBIDDEN)
        order.status = "confirmed"
        order.save()
        return Response(OrderSerializer(order).data)

// oldviws

// src/context/CartContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import apiServer from '../utils/apiServer';
import API_ROUTES from '../apiRoutes';
import { useAuth } from './AuthContext';
import toast from 'react-hot-toast';

const CartContext = createContext();

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export const CartProvider = ({ children }) => {
  const { user } = useAuth();
  const [cart, setCart] = useState(null);
  const [cartItems, setCartItems] = useState([]);
  const [cartLoading, setCartLoading] = useState(false);
  const [cartError, setCartError] = useState(null);

  // Fetch cart data when user changes
  useEffect(() => {
    if (user) {
      fetchCart();
    } else {
      setCart(null);
      setCartItems([]);
    }
  }, [user]);

  const fetchCart = async () => {
    if (!user) return;
    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer(API_ROUTES.CART, 'GET');

      if (!response.error && response.data) {
        let rawData = response.data;
        if (rawData.results) {
          rawData = rawData.results;
        }
        const cartData = Array.isArray(rawData) && rawData.length > 0
          ? rawData[0]
          : (rawData.id ? rawData : null);

        if (cartData) {
          setCart(cartData);
          setCartItems(cartData.items || []);
        } else {
          setCart(null);
          setCartItems([]);
        }
      } else {
        setCart(null);
        setCartItems([]);
      }
    } catch (error) {
      console.error('Error fetching cart:', error);
      setCartError('Failed to fetch cart');
    } finally {
      setCartLoading(false);
    }
  };

  const addToCart = async (productId, quantity = 1) => {
    // Early return without toast - let ProductDetailPage handle UI feedback
    if (!user) {
      return { success: false, error: 'User not authenticated' };
    }

    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer(API_ROUTES.CART_ADD, 'POST', {
        product_id: productId,
        quantity,
      });

      if (!response.error) {
        setCart(response.data);
        setCartItems(response.data.items || []);
        toast.success('Product added to cart successfully!');
        return { success: true, data: response.data };
      } else {
        setCartError(response.message);
        toast.error(response.message || 'Failed to add item to cart');
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error adding to cart:', error);
      setCartError('Failed to add item to cart');
      toast.error('Failed to add item to cart');
      return { success: false, error: 'Failed to add item to cart' };
    } finally {
      setCartLoading(false);
    }
  };

  const removeFromCart = async (productId) => {
    if (!user) {
      return { success: false, error: 'User not authenticated' };
    }

    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer(API_ROUTES.CART_REMOVE, 'POST', {
        product_id: productId,
      });

      if (!response.error) {
        setCart(response.data);
        setCartItems(response.data.items || []);
        toast.success('Item removed from cart');
        return { success: true, data: response.data };
      } else {
        setCartError(response.message);
        toast.error(response.message || 'Failed to remove item');
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error removing from cart:', error);
      setCartError('Failed to remove item from cart');
      toast.error('Failed to remove item from cart');
      return { success: false, error: 'Failed to remove item from cart' };
    } finally {
      setCartLoading(false);
    }
  };

  const updateCartItemQuantity = async (productId, newQuantity) => {
    if (!user) {
      return { success: false, error: 'User not authenticated' };
    }
    
    if (newQuantity < 1) {
      return { success: false, error: 'Invalid quantity' };
    }

    if (newQuantity === 0) {
      return await removeFromCart(productId);
    }

    try {
      setCartLoading(true);
      setCartError(null);

      // remove ‚Üí add (no extra toast on remove)
      await apiServer(API_ROUTES.CART_REMOVE, 'POST', { product_id: productId });

      const response = await apiServer(API_ROUTES.CART_ADD, 'POST', {
        product_id: productId,
        quantity: newQuantity,
      });

      if (!response.error) {
        setCart(response.data);
        setCartItems(response.data.items || []);
        toast.success('Cart updated successfully!');
        return { success: true, data: response.data };
      } else {
        toast.error(response.message || 'Failed to update cart');
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error updating cart item:', error);
      toast.error('Failed to update cart item');
      return { success: false, error: 'Failed to update cart item' };
    } finally {
      setCartLoading(false);
    }
  };

  const clearCart = async () => {
    if (!user) {
      return { success: false, error: 'User not authenticated' };
    }

    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer(API_ROUTES.CART_CLEAR, 'POST');

      if (!response.error) {
        setCart(null);
        setCartItems([]);
        toast.success('Cart cleared');
        return { success: true };
      } else {
        setCartError(response.message);
        toast.error(response.message || 'Failed to clear cart');
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error clearing cart:', error);
      setCartError('Failed to clear cart');
      toast.error('Failed to clear cart');
      return { success: false, error: 'Failed to clear cart' };
    } finally {
      setCartLoading(false);
    }
  };

  const getCartItemCount = () => {
    return cartItems.reduce((total, item) => total + (item.quantity || 0), 0);
  };

  const getCartSubtotal = () => {
    return cartItems.reduce((total, item) => total + (item.total_price || 0), 0);
  };

  const isInCart = (productId) => {
    return cartItems.some(item => item.product?.id === productId);
  };

  const getCartItemQuantity = (productId) => {
    const item = cartItems.find(item => item.product?.id === productId);
    return item ? item.quantity : 0;
  };

  const value = {
    cart,
    cartItems,
    cartLoading,
    cartError,
    addToCart,
    removeFromCart,
    updateCartItemQuantity,
    clearCart,
    fetchCart,
    getCartItemCount,
    getCartSubtotal,
    isInCart,
    getCartItemQuantity,
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};
  <div className="flex items-center gap-3">
                            <button
                                onClick={() => setIsFavorite(!isFavorite)}
                                className={`p-2 rounded-full border transition-colors ${isFavorite
                                    ? 'bg-red-50 border-red-200 text-red-600'
                                    : 'bg-white border-gray-300 text-gray-600 hover:text-red-600'
                                    }`}
                            >
                                <Heart className={`w-5 h-5 ${isFavorite ? 'fill-current' : ''}`} />
                            </button>

                            <button
                                onClick={handleShare}
                                className="p-2 rounded-full border border-gray-300 text-gray-600 hover:text-gray-900 transition-colors"
                            >
                                <Share2 className="w-5 h-5" />
                            </button>
                        </div>
// cart page code with shiing and tax logic 

import React, { useEffect } from 'react';
import { 
  ShoppingCart, 
  Trash2, 
  Plus, 
  Minus, 
  ArrowLeft, 
  Package,
  CreditCard,
  Shield,
  Truck
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import Loader from '../components/common/Loader';
import ErrorMessage from '../components/common/ErrorMessage';

const CartPage = () => {
  const navigate = useNavigate();
  const { user } = useAuth();

  const { 
    cartItems, 
    cartLoading, 
    cartError,
    removeFromCart,
    updateCartItemQuantity,
    clearCart,
    getCartSubtotal,
    fetchCart
  } = useCart();

  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
    fetchCart();
  }, [user]);

  // --- Handlers ---
  const handleQuantityChange = async (productId, currentQuantity, change) => {
    const newQuantity = currentQuantity + change;
    if (newQuantity < 1) return;
    await updateCartItemQuantity(productId, newQuantity);
  };

  const handleRemoveItem = async (productId) => {
    if (window.confirm('Are you sure you want to remove this item from your cart?')) {
      await removeFromCart(productId);
    }
  };

  const handleClearCart = async () => {
    if (window.confirm('Are you sure you want to clear your entire cart?')) {
      await clearCart();
    }
  };

  const handleCheckout = () => {
    alert('Checkout functionality will be implemented soon!');
  };

  // --- Totals ---
  const subtotal = getCartSubtotal();
  const shipping = subtotal > 2000 ? 0 : 200;
  const tax = Math.round(subtotal * 0.05);
  const total = subtotal + shipping + tax;

  // --- States ---
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <ShoppingCart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Please Login</h2>
          <p className="text-gray-600 mb-6">You need to login to view your cart</p>
          <button
            onClick={() => navigate('/login')}
            className="bg-emerald-600 text-white px-6 py-3 rounded-xl hover:bg-emerald-700 transition-colors"
          >
            Login
          </button>
        </div>
      </div>
    );
  }

  if (cartLoading && cartItems.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loader />
      </div>
    );
  }

  if (cartError) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <ErrorMessage message={cartError} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate('/products')}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
                <span className="font-medium">Continue Shopping</span>
              </button>
              <div className="h-6 w-px bg-gray-300"></div>
              <h1 className="text-2xl font-bold text-gray-900">Shopping Cart</h1>
            </div>

            {cartItems.length > 0 && (
              <button
                onClick={handleClearCart}
                disabled={cartLoading}
                className="text-red-600 hover:text-red-700 font-medium transition-colors disabled:opacity-50"
              >
                Clear Cart
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {cartItems.length === 0 ? (
          // Empty Cart
          <div className="text-center py-16">
            <ShoppingCart className="w-24 h-24 text-gray-300 mx-auto mb-6" />
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h2>
            <p className="text-gray-600 mb-8 max-w-md mx-auto">
              Looks like you haven't added any items to your cart yet. 
              Start shopping to fill it up with amazing products from Gilgit-Baltistan!
            </p>
            <button
              onClick={() => navigate('/products')}
              className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-8 py-4 rounded-xl font-semibold hover:shadow-lg transform hover:scale-105 transition-all duration-200"
            >
              Start Shopping
            </button>
          </div>
        ) : (
          // Cart with Items
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cart Items */}
            <div className="lg:col-span-2 space-y-4">
              {cartItems.map((item) => (
                <div key={item.id} className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow">
                  {/* Item Content */}
                  <div className="flex flex-col sm:flex-row gap-4">
                    {/* Image */}
                    <div className="w-full sm:w-32 h-32 rounded-xl overflow-hidden bg-gray-100 flex-shrink-0">
                      <img
                        src={item.product?.image || "https://via.placeholder.com/200x200?text=No+Image"}
                        alt={item.product?.name || "Product"}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    {/* Details */}
                    <div className="flex-1">
                      <div className="flex justify-between items-start mb-2">
                        <h3
                          className="text-lg font-bold text-gray-900 hover:text-emerald-600 cursor-pointer"
                          onClick={() => navigate(`/products/${item.product?.id}`)}
                        >
                          {item.product?.name || "Unknown Product"}
                        </h3>
                        <button
                          onClick={() => handleRemoveItem(item.product?.id)}
                          disabled={cartLoading}
                          className="text-red-500 hover:text-red-700 p-1 disabled:opacity-50"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>

                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                        {/* Price */}
                        <div>
                          <p className="text-sm text-gray-600 mb-1">
                            {item.product?.category?.name} ‚Ä¢ {item.product?.city?.name}
                          </p>
                          <div className="flex items-center gap-2">
                            {item.product?.discount_price ? (
                              <>
                                <span className="text-lg font-bold text-emerald-600">
                                  Rs. {item.product.discount_price}
                                </span>
                                <span className="text-sm text-gray-500 line-through">
                                  Rs. {item.product.price}
                                </span>
                                <span className="text-xs bg-red-100 text-red-600 px-2 py-1 rounded-full">
                                  {item.product.discount_percentage}% OFF
                                </span>
                              </>
                            ) : (
                              <span className="text-lg font-bold text-emerald-600">
                                Rs. {item.product?.price}
                              </span>
                            )}
                          </div>
                        </div>
                        {/* Quantity + Total */}
<div className="flex items-center gap-4">
  <div className="flex items-center border border-gray-300 rounded-lg">
    <button
      onClick={() => handleQuantityChange(item.product?.id, item.quantity, -1)}
      disabled={cartLoading || item.quantity <= 1}
      className="p-2 hover:bg-gray-50 disabled:opacity-50"
    >
      <Minus className="w-4 h-4" />
    </button>
    <span className="px-4 py-2 font-medium min-w-[3rem] text-center">
      {item.quantity}
    </span>
    <button
      onClick={() => handleQuantityChange(item.product?.id, item.quantity, 1)}
      disabled={cartLoading || item.quantity >= (item.product?.stock || 1)}
      className="p-2 hover:bg-gray-50 disabled:opacity-50"
    >
      <Plus className="w-4 h-4" />
    </button>
  </div>
  <div className="text-right">
    <p className="text-lg font-bold text-gray-900">
      Rs. {Number(item.total_price || 0).toFixed(2)}
    </p>
    <p className="text-xs text-gray-500">
      Rs. {Number(item.product?.discount_price ?? item.product?.price ?? 0).toFixed(2)} each
    </p>
  </div>
</div>

                      </div>
                    </div>
                  </div>

                  {/* Stock Warning */}
                  {item.product?.stock < 10 && item.product?.stock > 0 && (
                    <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <p className="text-sm text-yellow-700 flex items-center gap-2">
                        <Package className="w-4 h-4" />
                        Only {item.product.stock} left in stock - order soon!
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>

            {/* Order Summary */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-2xl shadow-lg p-6 sticky top-24">
                <h2 className="text-xl font-bold text-gray-900 mb-6">Order Summary</h2>
                <div className="space-y-4">
                  <div className="flex justify-between text-gray-600">
                    <span>Subtotal ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} items)</span>
                    <span>Rs. {subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-gray-600">
                    <span>Shipping</span>
                    <span>{shipping === 0 ? 'Free' : `Rs. ${shipping.toFixed(2)}`}</span>
                  </div>
                  <div className="flex justify-between text-gray-600">
                    <span>Tax (5%)</span>
                    <span>Rs. {tax.toFixed(2)}</span>
                  </div>
                  <hr className="border-gray-200" />
                  <div className="flex justify-between text-lg font-bold text-gray-900">
                    <span>Total</span>
                    <span>Rs. {total.toFixed(2)}</span>
                  </div>
                </div>
                {shipping > 0 && (
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-700 flex items-center gap-2">
                      <Truck className="w-4 h-4" />
                      Add Rs. {(2000 - subtotal).toFixed(2)} more for free shipping!
                    </p>
                  </div>
                )}
                <button
                  onClick={handleCheckout}
                  disabled={cartLoading || cartItems.length === 0}
                  className="w-full mt-6 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transform hover:scale-105 transition-all duration-200 disabled:opacity-50 flex items-center justify-center gap-2"
                >
                  <CreditCard className="w-5 h-5" />
                  Proceed to Checkout
                </button>
                <div className="mt-6 pt-6 border-t border-gray-200 space-y-2 text-sm text-gray-600">
                  <div className="flex items-center gap-2"><Shield className="w-4 h-4 text-emerald-600" /> Secure checkout</div>
                  <div className="flex items-center gap-2"><Truck className="w-4 h-4 text-emerald-600" /> Fast delivery across GB</div>
                  <div className="flex items-center gap-2"><Package className="w-4 h-4 text-emerald-600" /> Quality guaranteed</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartPage;
// cart page code with shiing and tax logic 

// cart section old version code 

import React, { createContext, useContext, useState, useEffect } from 'react';
import apiServer from '../utils/apiServer';
import API_ROUTES from '../apiRoutes';
import { useAuth } from './AuthContext';

const CartContext = createContext();

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export const CartProvider = ({ children }) => {
  const { user } = useAuth();
  const [cart, setCart] = useState(null);
  const [cartItems, setCartItems] = useState([]);
  const [cartLoading, setCartLoading] = useState(false);
  const [cartError, setCartError] = useState(null);

  // Fetch cart data when user changes
  useEffect(() => {
    if (user) {
      fetchCart();
    } else {
      // Clear cart when user logs out
      setCart(null);
      setCartItems([]);
    }
  }, [user]);

  const fetchCart = async () => {
    if (!user) return;

    try {
      setCartLoading(true);
      setCartError(null);
      
      const response = await apiServer('/ecommerce/cart/', 'GET');
      
      if (!response.error && response.data && response.data.length > 0) {
        const cartData = response.data[0]; // Get first cart (user should have only one)
        setCart(cartData);
        setCartItems(cartData.items || []);
      } else {
        // No cart exists yet, will be created when user adds first item
        setCart(null);
        setCartItems([]);
      }
    } catch (error) {
      console.error('Error fetching cart:', error);
      setCartError('Failed to fetch cart');
    } finally {
      setCartLoading(false);
    }
  };

  const addToCart = async (productId, quantity = 1) => {
    if (!user) {
      alert('Please login to add items to cart');
      return { success: false, error: 'User not authenticated' };
    }

    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer('/ecommerce/cart/add/', 'POST', {
        product_id: productId,
        quantity: quantity
      });

      if (!response.error) {
        setCart(response.data);
        setCartItems(response.data.items || []);
        return { success: true, data: response.data };
      } else {
        setCartError(response.message);
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error adding to cart:', error);
      setCartError('Failed to add item to cart');
      return { success: false, error: 'Failed to add item to cart' };
    } finally {
      setCartLoading(false);
    }
  };

  const removeFromCart = async (productId) => {
    if (!user) return { success: false, error: 'User not authenticated' };

    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer('/ecommerce/cart/remove/', 'POST', {
        product_id: productId
      });

      if (!response.error) {
        setCart(response.data);
        setCartItems(response.data.items || []);
        return { success: true, data: response.data };
      } else {
        setCartError(response.message);
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error removing from cart:', error);
      setCartError('Failed to remove item from cart');
      return { success: false, error: 'Failed to remove item from cart' };
    } finally {
      setCartLoading(false);
    }
  };

  const updateCartItemQuantity = async (productId, newQuantity) => {
    if (!user || newQuantity < 1) return { success: false };

    // If quantity is 0, remove the item
    if (newQuantity === 0) {
      return await removeFromCart(productId);
    }

    try {
      setCartLoading(true);
      setCartError(null);

      // Remove the item first, then add with new quantity
      await removeFromCart(productId);
      return await addToCart(productId, newQuantity);
    } catch (error) {
      console.error('Error updating cart item:', error);
      return { success: false, error: 'Failed to update cart item' };
    }
  };

  const clearCart = async () => {
    if (!user) return { success: false, error: 'User not authenticated' };

    try {
      setCartLoading(true);
      setCartError(null);

      const response = await apiServer('/ecommerce/cart/clear/', 'POST');

      if (!response.error) {
        setCart(null);
        setCartItems([]);
        return { success: true };
      } else {
        setCartError(response.message);
        return { success: false, error: response.message };
      }
    } catch (error) {
      console.error('Error clearing cart:', error);
      setCartError('Failed to clear cart');
      return { success: false, error: 'Failed to clear cart' };
    } finally {
      setCartLoading(false);
    }
  };

  const getCartItemCount = () => {
    return cartItems.reduce((total, item) => total + (item.quantity || 0), 0);
  };

  const getCartSubtotal = () => {
    return cartItems.reduce((total, item) => total + (item.total_price || 0), 0);
  };

  const isInCart = (productId) => {
    return cartItems.some(item => item.product?.id === productId);
  };

  const getCartItemQuantity = (productId) => {
    const item = cartItems.find(item => item.product?.id === productId);
    return item ? item.quantity : 0;
  };

  const value = {
    cart,
    cartItems,
    cartLoading,
    cartError,
    addToCart,
    removeFromCart,
    updateCartItemQuantity,
    clearCart,
    fetchCart,
    getCartItemCount,
    getCartSubtotal,
    isInCart,
    getCartItemQuantity
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

import React, { useEffect } from 'react';
import { 
  ShoppingCart, 
  Trash2, 
  Plus, 
  Minus, 
  ArrowLeft, 
  Package,
  CreditCard,
  Shield,
  Truck
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import Loader from '../components/common/Loader';
import ErrorMessage from '../components/common/ErrorMessage';

const CartPage = () => {
  const navigate = useNavigate();
  const { user } = useAuth();

  const { 
    cartItems, 
    cartLoading, 
    cartError,
    removeFromCart,
    updateCartItemQuantity,
    clearCart,
    getCartSubtotal,
    fetchCart
  } = useCart();

  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
    fetchCart();
  }, [user]);

  // --- Handlers ---
  const handleQuantityChange = async (productId, currentQuantity, change) => {
    const newQuantity = currentQuantity + change;
    if (newQuantity < 1) return;
    await updateCartItemQuantity(productId, newQuantity);
  };

  const handleRemoveItem = async (productId) => {
    if (window.confirm('Are you sure you want to remove this item from your cart?')) {
      await removeFromCart(productId);
    }
  };

  const handleClearCart = async () => {
    if (window.confirm('Are you sure you want to clear your entire cart?')) {
      await clearCart();
    }
  };

  const handleCheckout = () => {
    alert('Checkout functionality will be implemented soon!');
  };

  // --- Totals ---
  const subtotal = getCartSubtotal();
  const shipping = subtotal > 2000 ? 0 : 200;
  const tax = Math.round(subtotal * 0.05);
  const total = subtotal + shipping + tax;

  // --- States ---
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <ShoppingCart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Please Login</h2>
          <p className="text-gray-600 mb-6">You need to login to view your cart</p>
          <button
            onClick={() => navigate('/login')}
            className="bg-emerald-600 text-white px-6 py-3 rounded-xl hover:bg-emerald-700 transition-colors"
          >
            Login
          </button>
        </div>
      </div>
    );
  }

  if (cartLoading && cartItems.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loader />
      </div>
    );
  }

  if (cartError) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <ErrorMessage message={cartError} />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate('/products')}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
                <span className="font-medium">Continue Shopping</span>
              </button>
              <div className="h-6 w-px bg-gray-300"></div>
              <h1 className="text-2xl font-bold text-gray-900">Shopping Cart</h1>
            </div>

            {cartItems.length > 0 && (
              <button
                onClick={handleClearCart}
                disabled={cartLoading}
                className="text-red-600 hover:text-red-700 font-medium transition-colors disabled:opacity-50"
              >
                Clear Cart
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {cartItems.length === 0 ? (
          // Empty Cart
          <div className="text-center py-16">
            <ShoppingCart className="w-24 h-24 text-gray-300 mx-auto mb-6" />
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h2>
            <p className="text-gray-600 mb-8 max-w-md mx-auto">
              Looks like you haven't added any items to your cart yet. 
              Start shopping to fill it up with amazing products from Gilgit-Baltistan!
            </p>
            <button
              onClick={() => navigate('/products')}
              className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-8 py-4 rounded-xl font-semibold hover:shadow-lg transform hover:scale-105 transition-all duration-200"
            >
              Start Shopping
            </button>
          </div>
        ) : (
          // Cart with Items
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cart Items */}
            <div className="lg:col-span-2 space-y-4">
              {cartItems.map((item) => (
                <div key={item.id} className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow">
                  {/* Item Content */}
                  <div className="flex flex-col sm:flex-row gap-4">
                    {/* Image */}
                    <div className="w-full sm:w-32 h-32 rounded-xl overflow-hidden bg-gray-100 flex-shrink-0">
                      <img
                        src={item.product?.image || "https://via.placeholder.com/200x200?text=No+Image"}
                        alt={item.product?.name || "Product"}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    {/* Details */}
                    <div className="flex-1">
                      <div className="flex justify-between items-start mb-2">
                        <h3
                          className="text-lg font-bold text-gray-900 hover:text-emerald-600 cursor-pointer"
                          onClick={() => navigate(`/products/${item.product?.id}`)}
                        >
                          {item.product?.name || "Unknown Product"}
                        </h3>
                        <button
                          onClick={() => handleRemoveItem(item.product?.id)}
                          disabled={cartLoading}
                          className="text-red-500 hover:text-red-700 p-1 disabled:opacity-50"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>

                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                        {/* Price */}
                        <div>
                          <p className="text-sm text-gray-600 mb-1">
                            {item.product?.category?.name} ‚Ä¢ {item.product?.city?.name}
                          </p>
                          <div className="flex items-center gap-2">
                            {item.product?.discount_price ? (
                              <>
                                <span className="text-lg font-bold text-emerald-600">
                                  Rs. {item.product.discount_price}
                                </span>
                                <span className="text-sm text-gray-500 line-through">
                                  Rs. {item.product.price}
                                </span>
                                <span className="text-xs bg-red-100 text-red-600 px-2 py-1 rounded-full">
                                  {item.product.discount_percentage}% OFF
                                </span>
                              </>
                            ) : (
                              <span className="text-lg font-bold text-emerald-600">
                                Rs. {item.product?.price}
                              </span>
                            )}
                          </div>
                        </div>
                        {/* Quantity + Total */}
                       {/* Quantity + Total */}
<div className="flex items-center gap-4">
  <div className="flex items-center border border-gray-300 rounded-lg">
    <button
      onClick={() => handleQuantityChange(item.product?.id, item.quantity, -1)}
      disabled={cartLoading || item.quantity <= 1}
      className="p-2 hover:bg-gray-50 disabled:opacity-50"
    >
      <Minus className="w-4 h-4" />
    </button>
    <span className="px-4 py-2 font-medium min-w-[3rem] text-center">
      {item.quantity}
    </span>
    <button
      onClick={() => handleQuantityChange(item.product?.id, item.quantity, 1)}
      disabled={cartLoading || item.quantity >= (item.product?.stock || 1)}
      className="p-2 hover:bg-gray-50 disabled:opacity-50"
    >
      <Plus className="w-4 h-4" />
    </button>
  </div>
  <div className="text-right">
    <p className="text-lg font-bold text-gray-900">
      Rs. {Number(item.total_price || 0).toFixed(2)}
    </p>
    <p className="text-xs text-gray-500">
      Rs. {Number(item.product?.discount_price ?? item.product?.price ?? 0).toFixed(2)} each
    </p>
  </div>
</div>

                      </div>
                    </div>
                  </div>

                  {/* Stock Warning */}
                  {item.product?.stock < 10 && item.product?.stock > 0 && (
                    <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <p className="text-sm text-yellow-700 flex items-center gap-2">
                        <Package className="w-4 h-4" />
                        Only {item.product.stock} left in stock - order soon!
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>

            {/* Order Summary */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-2xl shadow-lg p-6 sticky top-24">
                <h2 className="text-xl font-bold text-gray-900 mb-6">Order Summary</h2>
                <div className="space-y-4">
                  <div className="flex justify-between text-gray-600">
                    <span>Subtotal ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} items)</span>
                    <span>Rs. {subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-gray-600">
                    <span>Shipping</span>
                    <span>{shipping === 0 ? 'Free' : `Rs. ${shipping.toFixed(2)}`}</span>
                  </div>
                  <div className="flex justify-between text-gray-600">
                    <span>Tax (5%)</span>
                    <span>Rs. {tax.toFixed(2)}</span>
                  </div>
                  <hr className="border-gray-200" />
                  <div className="flex justify-between text-lg font-bold text-gray-900">
                    <span>Total</span>
                    <span>Rs. {total.toFixed(2)}</span>
                  </div>
                </div>
                {shipping > 0 && (
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-700 flex items-center gap-2">
                      <Truck className="w-4 h-4" />
                      Add Rs. {(2000 - subtotal).toFixed(2)} more for free shipping!
                    </p>
                  </div>
                )}
                <button
                  onClick={handleCheckout}
                  disabled={cartLoading || cartItems.length === 0}
                  className="w-full mt-6 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transform hover:scale-105 transition-all duration-200 disabled:opacity-50 flex items-center justify-center gap-2"
                >
                  <CreditCard className="w-5 h-5" />
                  Proceed to Checkout
                </button>
                <div className="mt-6 pt-6 border-t border-gray-200 space-y-2 text-sm text-gray-600">
                  <div className="flex items-center gap-2"><Shield className="w-4 h-4 text-emerald-600" /> Secure checkout</div>
                  <div className="flex items-center gap-2"><Truck className="w-4 h-4 text-emerald-600" /> Fast delivery across GB</div>
                  <div className="flex items-center gap-2"><Package className="w-4 h-4 text-emerald-600" /> Quality guaranteed</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartPage;
import React, { useState, useEffect } from "react";
import { Mountain, Menu, X, User, Home, MapPin, Calendar, ShoppingBag, UtensilsCrossed, ShoppingCart } from "lucide-react";
import { useNavigate, Link, useLocation } from "react-router-dom";
import apiServer from "../utils/apiServer";
import API_ROUTES from "../apiRoutes";
import { useAuth } from "../context/AuthContext";
import { useCart } from "../context/CartContext";

const Header = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [showProfileDropdown, setShowProfileDropdown] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  const { user, setUser } = useAuth();
  const { getCartItemCount, cartLoading } = useCart();
  const location = useLocation();
  const navigate = useNavigate();

  const firstLetter = user?.username?.charAt(0).toUpperCase();
  
  // Check if current page should show cart icon
  const shouldShowCart = () => {
    const currentPath = location.pathname;
    return currentPath.startsWith('/products') || currentPath === '/cart';
  };

  // Helper to read cookies
  const getCookie = (name) => {
    const match = document.cookie.match(new RegExp(`(^| )${name}=([^;]+)`));
    return match ? decodeURIComponent(match[2]) : null;
  };

  useEffect(() => {
    const token = getCookie("access_token");
    setIsAuthenticated(!!token);
  }, [user]);

  // Close mobile menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (isMenuOpen && !event.target.closest('.mobile-menu') && !event.target.closest('.mobile-menu-button')) {
        setIsMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isMenuOpen]);

  const handleLogout = async () => {
    try {
      await apiServer(API_ROUTES.LOGOUT, "POST");
      document.cookie = "access_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
      setUser(null);
      setIsAuthenticated(false);
      setIsMenuOpen(false);
      setShowProfileDropdown(false);
      navigate("/");
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  const handleMobileNavClick = (path) => {
    navigate(path);
    setIsMenuOpen(false);
  };

  const handleCartClick = () => {
    if (!isAuthenticated) {
      alert('Please login to view your cart');
      navigate('/login');
      return;
    }
    navigate('/cart');
  };

  const navigationItems = [
    { name: 'Home', path: '/', icon: Home },
    { name: 'Cities', path: '/cities', icon: MapPin },
    { name: 'Events', path: '/events', icon: Calendar },
    { name: 'Products', path: '/products', icon: ShoppingBag },
    { name: 'Restaurants', path: '/restaurant', icon: UtensilsCrossed },
  ];

  const cartItemCount = getCartItemCount();

  return (
    <>
      <header className="bg-white/95 backdrop-blur-md shadow-lg sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            {/* Logo */}
            <div
              className="flex items-center space-x-2 cursor-pointer"
              onClick={() => navigate("/")}
            >
              <div className="bg-gradient-to-r from-emerald-600 to-teal-600 p-2 rounded-xl">
                <Mountain className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                  GB Green Guide
                </h1>
                <p className="text-xs text-gray-500">Discover Gilgit-Baltistan</p>
              </div>
            </div>

            {/* Desktop Navigation */}
            <nav className="hidden md:flex items-center space-x-8">
              <Link to="/" className="font-medium text-gray-700 hover:text-emerald-600 transition-colors">
                Home
              </Link>
              <Link to="/cities" className="font-medium text-gray-700 hover:text-emerald-600 transition-colors">
                Cities
              </Link>
              <Link to="/events" className="font-medium text-gray-700 hover:text-emerald-600 transition-colors">
                Events
              </Link>
              <Link to="/restaurant" className="font-medium text-gray-700 hover:text-emerald-600 transition-colors">
                Restaurants
              </Link>
              <Link to="/products" className="font-medium text-gray-700 hover:text-emerald-600 transition-colors">
                Products
              </Link>
            </nav>

            {/* Desktop Auth Buttons / Profile / Cart */}
            <div className="hidden md:flex items-center space-x-4">
              {/* Cart Icon - Only show on product pages */}
              {shouldShowCart() && isAuthenticated && (
                <button
                  onClick={handleCartClick}
                  className="relative p-2 text-gray-700 hover:text-emerald-600 transition-colors"
                >
                  <ShoppingCart className="h-6 w-6" />
                  {cartItemCount > 0 && (
                    <span className="absolute -top-2 -right-2 bg-emerald-600 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center min-w-[20px]">
                      {cartItemCount > 99 ? '99+' : cartItemCount}
                    </span>
                  )}
                  {cartLoading && (
                    <span className="absolute -top-1 -right-1 w-3 h-3">
                      <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-emerald-400 opacity-75"></span>
                    </span>
                  )}
                </button>
              )}

              {isAuthenticated ? (
                <div className="relative">
                  <button
                    onClick={() => setShowProfileDropdown(!showProfileDropdown)}
                    className="flex items-center space-x-2 p-2 rounded-full hover:bg-gray-100 transition-colors"
                  >
                    <div className="w-8 h-8 rounded-full bg-gradient-to-r from-emerald-600 to-teal-600 flex items-center justify-center text-white font-bold text-lg shadow-md">
                      {user?.username?.charAt(0).toUpperCase()}
                    </div>
                    <span className="font-medium text-gray-700">
                      {user?.username || "My Account"}
                    </span>
                    <svg
                      className="w-4 h-4 text-gray-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>

                  {/* Desktop Profile Dropdown */}
                  {showProfileDropdown && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 py-2 z-50">
                      <button
                        onClick={() => {
                          navigate("/profile");
                          setShowProfileDropdown(false);
                        }}
                        className="flex items-center space-x-2 px-4 py-2 text-gray-700 hover:bg-emerald-50 hover:text-emerald-600 w-full text-left transition-colors"
                      >
                        <User className="h-4 w-4" />
                        <span>My Profile</span>
                      </button>
                      {shouldShowCart() && (
                        <button
                          onClick={() => {
                            handleCartClick();
                            setShowProfileDropdown(false);
                          }}
                          className="flex items-center space-x-2 px-4 py-2 text-gray-700 hover:bg-emerald-50 hover:text-emerald-600 w-full text-left transition-colors"
                        >
                          <ShoppingCart className="h-4 w-4" />
                          <span>My Cart ({cartItemCount})</span>
                        </button>
                      )}
                      <hr className="my-2" />
                      <button
                        onClick={() => {
                          handleLogout();
                          setShowProfileDropdown(false);
                        }}
                        className="flex items-center space-x-2 px-4 py-2 text-red-600 hover:bg-red-50 w-full text-left transition-colors"
                      >
                        <svg
                          className="h-4 w-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H3" />
                        </svg>
                        <span>Logout</span>
                      </button>
                    </div>
                  )}
                </div>
              ) : (
                <>
                  <button
                    onClick={() => navigate("/login")}
                    className="text-emerald-600 hover:text-emerald-700 font-medium transition-colors"
                  >
                    Login
                  </button>
                  <button
                    onClick={() => navigate("/signup")}
                    className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-2 rounded-full hover:shadow-lg transform hover:scale-105 transition-all duration-200"
                  >
                    Sign Up
                  </button>
                </>
              )}
            </div>

            {/* Mobile Menu Button */}
            <button
              className="md:hidden mobile-menu-button p-2 rounded-lg hover:bg-gray-100 transition-colors"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              {isMenuOpen ? <X className="h-6 w-6 text-gray-700" /> : <Menu className="h-6 w-6 text-gray-700" />}
            </button>
          </div>
        </div>
      </header>

      {/* Mobile Menu Overlay */}
      {isMenuOpen && (
        <div className="fixed inset-0 z-40 md:hidden">
          <div className="fixed inset-0 bg-black bg-opacity-50" onClick={() => setIsMenuOpen(false)}></div>
        </div>
      )}

      {/* Mobile Menu */}
      <div className={`fixed top-0 right-0 h-full w-80 bg-white shadow-2xl transform transition-transform duration-300 ease-in-out z-50 md:hidden mobile-menu ${isMenuOpen ? 'translate-x-0' : 'translate-x-full'
        }`}>
        <div className="flex flex-col h-full">
          {/* Mobile Menu Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-emerald-600 to-teal-600 p-2 rounded-xl">
                <Mountain className="h-6 w-6 text-white" />
              </div>
              <div>
                <h2 className="text-lg font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                  GB Green Guide
                </h2>
              </div>
            </div>
            <button
              onClick={() => setIsMenuOpen(false)}
              className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <X className="h-6 w-6 text-gray-500" />
            </button>
          </div>

          {/* User Profile Section (Mobile) */}
          {isAuthenticated && (
            <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-emerald-50 to-teal-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-emerald-600 to-teal-600 flex items-center justify-center text-white font-bold text-xl shadow-md">
                    {user?.username?.charAt(0).toUpperCase()}
                  </div>
                  <div>
                    <p className="font-semibold text-gray-800">{user?.username || "User"}</p>
                    <p className="text-sm text-gray-600">Welcome back!</p>
                  </div>
                </div>
                {/* Mobile Cart Icon */}
                {shouldShowCart() && (
                  <button
                    onClick={handleCartClick}
                    className="relative p-2 text-emerald-600 hover:bg-emerald-100 rounded-lg transition-colors"
                  >
                    <ShoppingCart className="h-5 w-5" />
                    {cartItemCount > 0 && (
                      <span className="absolute -top-1 -right-1 bg-emerald-600 text-white text-xs font-bold rounded-full h-4 w-4 flex items-center justify-center min-w-[16px]">
                        {cartItemCount > 9 ? '9+' : cartItemCount}
                      </span>
                    )}
                  </button>
                )}
              </div>
            </div>
          )}

          {/* Navigation Items */}
          <div className="flex-1 overflow-y-auto">
            <nav className="px-6 py-4">
              {navigationItems.map((item) => {
                const IconComponent = item.icon;
                return (
                  <button
                    key={item.name}
                    onClick={() => handleMobileNavClick(item.path)}
                    className="flex items-center space-x-4 w-full p-3 rounded-lg text-gray-700 hover:bg-emerald-50 hover:text-emerald-600 transition-colors mb-2"
                  >
                    <IconComponent className="h-5 w-5" />
                    <span className="font-medium">{item.name}</span>
                  </button>
                );
              })}
            </nav>

            {/* Profile Actions (Mobile) */}
            {isAuthenticated && (
              <div className="px-6 py-4 border-t border-gray-200">
                <button
                  onClick={() => handleMobileNavClick("/profile")}
                  className="flex items-center space-x-4 w-full p-3 rounded-lg text-gray-700 hover:bg-emerald-50 hover:text-emerald-600 transition-colors mb-2"
                >
                  <User className="h-5 w-5" />
                  <span className="font-medium">My Profile</span>
                </button>
                {shouldShowCart() && (
                  <button
                    onClick={handleCartClick}
                    className="flex items-center space-x-4 w-full p-3 rounded-lg text-gray-700 hover:bg-emerald-50 hover:text-emerald-600 transition-colors mb-2"
                  >
                    <ShoppingCart className="h-5 w-5" />
                    <span className="font-medium">My Cart ({cartItemCount})</span>
                  </button>
                )}
                <button
                  onClick={handleLogout}
                  className="flex items-center space-x-4 w-full p-3 rounded-lg text-red-600 hover:bg-red-50 transition-colors"
                >
                  <svg
                    className="h-5 w-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H3" />
                  </svg>
                  <span className="font-medium">Logout</span>
                </button>
              </div>
            )}
          </div>

          {/* Auth Buttons (Mobile) - Only show when not authenticated */}
          {!isAuthenticated && (
            <div className="p-6 border-t border-gray-200 space-y-3">
              <button
                onClick={() => handleMobileNavClick("/login")}
                className="flex items-center space-x-4 w-full p-3 rounded-lg text-emerald-600 hover:bg-emerald-50 transition-colors"
              >
                <svg
                  className="h-5 w-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H3" />
                </svg>
                <span className="font-medium">Login</span>
              </button>

              <button
                onClick={() => handleMobileNavClick("/signup")}
                className="flex items-center space-x-4 w-full p-3 rounded-lg text-emerald-600 hover:bg-emerald-50 transition-colors"
              >
                <svg
                  className="h-5 w-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H3" />
                </svg>
                <span className="font-medium">Sign Up</span>
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default Header;

import React, { useState, useEffect } from 'react';
import {
    ArrowLeft,
    Heart,
    Share2,
    MapPin,
    Tag,
    Package,
    Shield,
    Truck,
    Star,
    Plus,
    Minus,
    ShoppingCart
} from 'lucide-react';
import { useParams, useNavigate } from 'react-router-dom';
import Loader from '../components/common/Loader';
import ErrorMessage from '../components/common/ErrorMessage';
import ProductCard from '../components/ProductCard';
import useProducts from '../hooks/useProducts';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import apiServer from '../utils/apiServer';
import API_ROUTES from '../apiRoutes';

const ProductDetailPage = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const { user } = useAuth();
    const { addToCart, isInCart, getCartItemQuantity, cartLoading } = useCart();

    // Use the useProducts hook for fetching product details
    const { product, loading, error } = useProducts({
        productId: parseInt(id),
        fetchCategories: false
    });

    const [relatedProducts, setRelatedProducts] = useState([]);
    const [quantity, setQuantity] = useState(1);
    const [selectedImage, setSelectedImage] = useState(0);
    const [isFavorite, setIsFavorite] = useState(false);
    const [addingToCart, setAddingToCart] = useState(false);

    // Check if product is already in cart and get its quantity
    const cartQuantity = getCartItemQuantity(product?.id);
    const productInCart = isInCart(product?.id);

    // Fetch related products when product is loaded
    useEffect(() => {
        if (product?.category) {
            fetchRelatedProducts();
        }
    }, [product]);

    const fetchRelatedProducts = async () => {
        try {
            const params = new URLSearchParams({
                category: product.category.id,
                page_size: 4
            });

            const response = await apiServer(`${API_ROUTES.PRODUCTS}?${params.toString()}`, 'GET');

            if (!response.error) {
                const filtered = (response.data.results || response.data).filter(p => p.id !== product.id);
                setRelatedProducts(filtered.slice(0, 4));
            }
        } catch (err) {
            console.error('Failed to fetch related products:', err);
        }
    };

    const handleQuantityChange = (type) => {
        if (type === 'increment' && quantity < (product?.stock || 1)) {
            setQuantity(prev => prev + 1);
        } else if (type === 'decrement' && quantity > 1) {
            setQuantity(prev => prev - 1);
        }
    };

    const handleAddToCart = async () => {
        if (!user) {
            alert('Please login to add items to cart');
            navigate('/login');
            return;
        }

        if (!product.is_available || product.stock === 0) {
            alert('This product is currently out of stock');
            return;
        }

        setAddingToCart(true);
        const result = await addToCart(product.id, quantity);
        
        if (result.success) {
            alert(`Added ${quantity} ${product.name}(s) to cart!`);
            setQuantity(1); // Reset quantity after adding
        } else {
            alert(result.error || 'Failed to add item to cart');
        }
        setAddingToCart(false);
    };

    const handleBuyNow = async () => {
        if (!user) {
            alert('Please login to purchase');
            navigate('/login');
            return;
        }

        // Add to cart first, then redirect to cart
        setAddingToCart(true);
        const result = await addToCart(product.id, quantity);
        
        if (result.success) {
            navigate('/cart');
        } else {
            alert(result.error || 'Failed to add item to cart');
        }
        setAddingToCart(false);
    };

    const handleShare = async () => {
        if (navigator.share) {
            try {
                await navigator.share({
                    title: product.name,
                    text: product.description,
                    url: window.location.href,
                });
            } catch (err) {
                console.log('Error sharing:', err);
            }
        } else {
            navigator.clipboard.writeText(window.location.href);
            alert('Product link copied to clipboard!');
        }
    };

    const getStockStatus = () => {
        if (!product?.is_available) return { text: 'Unavailable', color: 'text-red-600', bgColor: 'bg-red-100' };
        if (product.stock === 0) return { text: 'Out of Stock', color: 'text-red-600', bgColor: 'bg-red-100' };
        if (product.stock < 10) return { text: 'Low Stock', color: 'text-yellow-600', bgColor: 'bg-yellow-100' };
        return { text: 'In Stock', color: 'text-green-600', bgColor: 'bg-green-100' };
    };

    const stockStatus = product ? getStockStatus() : null;
    const images = product?.image ? [product.image] : [];
    const isLoading = loading || addingToCart;

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <Loader />
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <ErrorMessage message={error} />
            </div>
        );
    }

    if (!product) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">Product not found</h2>
                    <button
                        onClick={() => navigate('/products')}
                        className="text-emerald-600 hover:text-emerald-700 font-medium"
                    >
                        Back to Products
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-white shadow-sm sticky top-0 z-40">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex items-center justify-between py-4">
                        <button
                            onClick={() => navigate(-1)}
                            className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
                        >
                            <ArrowLeft className="w-5 h-5" />
                            <span className="font-medium">Back</span>
                        </button>

                        <div className="flex items-center gap-3">
                            <button
                                onClick={() => setIsFavorite(!isFavorite)}
                                className={`p-2 rounded-full border transition-colors ${isFavorite
                                        ? 'bg-red-50 border-red-200 text-red-600'
                                        : 'bg-white border-gray-300 text-gray-600 hover:text-red-600'
                                    }`}
                            >
                                <Heart className={`w-5 h-5 ${isFavorite ? 'fill-current' : ''}`} />
                            </button>

                            <button
                                onClick={handleShare}
                                className="p-2 rounded-full border border-gray-300 text-gray-600 hover:text-gray-900 transition-colors"
                            >
                                <Share2 className="w-5 h-5" />
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
                    {/* Product Images */}
                    <div className="space-y-4">
                        <div className="aspect-[3/2] rounded-2xl overflow-hidden bg-gray-100">
                            <img
                                src={images.length > 0 ? images[selectedImage] : "https://via.placeholder.com/600x600?text=No+Image"}
                                alt={product.name}
                                className="w-full h-full object-cover"
                            />
                        </div>

                        {images.length > 1 && (
                            <div className="flex space-x-4">
                                {images.map((image, index) => (
                                    <button
                                        key={index}
                                        onClick={() => setSelectedImage(index)}
                                        className={`w-20 h-20 rounded-lg overflow-hidden border-2 ${selectedImage === index ? 'border-emerald-500' : 'border-gray-200'
                                            }`}
                                    >
                                        <img src={image} alt={`${product.name} ${index + 1}`} className="w-full h-full object-cover" />
                                    </button>
                                ))}
                            </div>
                        )}

                        <div className="grid grid-cols-3 gap-4 pt-6 border-t border-gray-200">
                            <div className="text-center">
                                <div className="w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-2">
                                    <Shield className="w-6 h-6 text-emerald-600" />
                                </div>
                                <p className="text-xs text-gray-600">Authentic Products</p>
                            </div>
                            <div className="text-center">
                                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2">
                                    <Truck className="w-6 h-6 text-blue-600" />
                                </div>
                                <p className="text-xs text-gray-600">Fast Delivery</p>
                            </div>
                            <div className="text-center">
                                <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2">
                                    <Star className="w-6 h-6 text-purple-600" />
                                </div>
                                <p className="text-xs text-gray-600">Quality Assured</p>
                            </div>
                        </div>
                    </div>

                    {/* Product Info */}
                    <div className="space-y-6">
                        <div>
                            <div className="flex items-center gap-2 mb-2">
                                {product.category && (
                                    <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-emerald-100 text-emerald-800">
                                        <Tag className="w-3 h-3 mr-1" />
                                        {product.category.name}
                                    </span>
                                )}
                                {stockStatus && (
                                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${stockStatus.bgColor} ${stockStatus.color}`}>
                                        <Package className="w-3 h-3 mr-1" />
                                        {stockStatus.text}
                                    </span>
                                )}
                            </div>

                            <h1 className="text-3xl font-bold text-gray-900">{product.name}</h1>

                            {product.city && (
                                <div className="flex items-center gap-1 text-gray-600 mt-2">
                                    <MapPin className="w-4 h-4" />
                                    <span>{product.city.name}</span>
                                </div>
                            )}
                        </div>

                        {/* Price */}
                        <div className="flex items-center gap-4">
                            {product.discount_price ? (
                                <div className="flex items-center gap-3">
                                    <span className="text-3xl font-bold text-emerald-600">
                                        Rs. {product.discount_price}
                                    </span>
                                    <span className="text-xl text-gray-500 line-through">
                                        Rs. {product.price}
                                    </span>
                                    <span className="px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-semibold">
                                        {product.discount_percentage}% OFF
                                    </span>
                                </div>
                            ) : (
                                <span className="text-3xl font-bold text-emerald-600">
                                    Rs. {product.price}
                                </span>
                            )}
                        </div>

                        {/* Description */}
                        <div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-2">Description</h3>
                            <p className="text-gray-600 leading-relaxed">
                                {product.description || 'No description available for this product.'}
                            </p>
                        </div>

                        {/* Stock Info */}
                        <div className="bg-gray-50 rounded-xl p-4">
                            <div className="flex items-center justify-between mb-2">
                                <span className="text-sm font-medium text-gray-700">Available Stock</span>
                                <span className="text-sm font-bold text-gray-900">{product.stock} units</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                                <div
                                    className="bg-emerald-600 h-2 rounded-full"
                                    style={{ width: `${Math.min((product.stock / 100) * 100, 100)}%` }}
                                ></div>
                            </div>
                        </div>

                        {/* Cart Status */}
                        {productInCart && (
                            <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4">
                                <p className="text-sm text-emerald-700 flex items-center gap-2">
                                    <ShoppingCart className="w-4 h-4" />
                                    This item is already in your cart ({cartQuantity} items)
                                </p>
                            </div>
                        )}

                        {/* Quantity Selector */}
                        {product.is_available && product.stock > 0 && (
                            <div className="flex items-center gap-4">
                                <span className="text-sm font-medium text-gray-700">Quantity:</span>
                                <div className="flex items-center border border-gray-300 rounded-lg">
                                    <button
                                        onClick={() => handleQuantityChange('decrement')}
                                        disabled={quantity <= 1}
                                        className="p-2 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                                    >
                                        <Minus className="w-4 h-4" />
                                    </button>
                                    <span className="px-4 py-2 font-medium">{quantity}</span>
                                    <button
                                        onClick={() => handleQuantityChange('increment')}
                                        disabled={quantity >= product.stock}
                                        className="p-2 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                                    >
                                        <Plus className="w-4 h-4" />
                                    </button>
                                </div>
                            </div>
                        )}

                        {/* Action Buttons */}
                        <div className="space-y-4">
                            {product.is_available && product.stock > 0 ? (
                                <div className="grid grid-cols-2 gap-4">
                                    <button
                                        onClick={handleAddToCart}
                                        disabled={isLoading}
                                        className="flex items-center justify-center gap-2 py-3 px-6 border border-emerald-600 text-emerald-600 rounded-xl font-semibold hover:bg-emerald-50 transition-colors disabled:opacity-50"
                                    >
                                        {isLoading ? (
                                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-emerald-600 border-t-transparent"></div>
                                        ) : (
                                            <ShoppingCart className="w-5 h-5" />
                                        )}
                                        Add to Cart
                                    </button>
                                    <button
                                        onClick={handleBuyNow}
                                        disabled={isLoading}
                                        className="flex items-center justify-center gap-2 py-3 px-6 bg-emerald-600 text-white rounded-xl font-semibold hover:bg-emerald-700 transition-colors disabled:opacity-50"
                                    >
                                        {isLoading && (
                                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                                        )}
                                        Buy Now
                                    </button>
                                </div>
                            ) : (
                                <button
                                    disabled
                                    className="w-full py-3 px-6 bg-gray-300 text-gray-500 rounded-xl font-semibold cursor-not-allowed"
                                >
                                    {!product.is_available ? 'Product Unavailable' : 'Out of Stock'}
                                </button>
                            )}
                        </div>
                    </div>
                </div>

                {/* Related Products */}
                {relatedProducts.length > 0 && (
                    <div className="mt-16">
                        <div className="text-center mb-8">
                            <h2 className="text-3xl font-bold text-gray-900 mb-4">
                                Related Products
                            </h2>
                            <p className="text-gray-600">
                                You might also like these products from the same category
                            </p>
                        </div>

                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                            {relatedProducts.map(product => (
                                <ProductCard
                                    key={product.id}
                                    product={product}
                                    showActions={false}
                                    onViewDetails={(prod) => navigate(`/products/${prod.id}`)}
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ProductDetailPage;

// cart section old version code 































import React, { useState, useEffect, useCallback } from 'react';
import { 
  Search, 
  Filter, 
  X, 
  ChevronDown, 
  ChevronLeft, 
  ChevronRight,
  Grid,
  List,
  MapPin,
  Package
} from 'lucide-react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import ProductCard from '../components/ProductCard';
import Loader from '../components/common/Loader';
import ErrorMessage from '../components/common/ErrorMessage';
import apiServer from '../utils/apiServer';
import API_ROUTES from '../apiRoutes';

const ProductListPage = () => {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  
  // State management
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [cities, setCities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const [totalResults, setTotalResults] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  // Filter states
  const [filters, setFilters] = useState({
    search: searchParams.get('search') || '',
    category: searchParams.get('category') || '',
    city: searchParams.get('city') || '',
    min_price: searchParams.get('min_price') || '',
    max_price: searchParams.get('max_price') || '',
    min_discount: searchParams.get('min_discount') || '',
    is_available: searchParams.get('is_available') || '',
    ordering: searchParams.get('ordering') || '-created_at'
  });

  const [priceRange, setPriceRange] = useState({
    min: parseInt(filters.min_price) || 0,
    max: parseInt(filters.max_price) || 10000
  });

  const [searchInput, setSearchInput] = useState(filters.search);

  // Debounced search
  const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  };

  const debouncedSearch = useCallback(
    debounce((searchTerm) => {
      setFilters(prev => ({ ...prev, search: searchTerm }));
      setCurrentPage(1);
    }, 300),
    []
  );

  useEffect(() => {
    debouncedSearch(searchInput);
  }, [searchInput, debouncedSearch]);

  // Fetch initial data
  useEffect(() => {
    fetchCategories();
    fetchCities();
  }, []);

  // Fetch products when filters change
  useEffect(() => {
    fetchProducts();
    updateUrlParams();
  }, [filters, currentPage]);

const fetchCategories = async () => {
  try {
    const response = await apiServer(API_ROUTES.PRODUCT_CATEGORIES, 'GET');
    if (!response.error) {
      setCategories(response.data.results || response.data || []);
    } else {
      setCategories([]); // fallback safe array
    }
  } catch (err) {
    console.error("Error fetching categories:", err);
    setCategories([]);
  }
};


  const fetchCities = async () => {
  const response = await apiServer(API_ROUTES.CITIES, 'GET');
  if (!response.error) {
    setCities(response.data.results || response.data || []);
  }
};


  const fetchProducts = async () => {
    try {
      setLoading(true);
      setError(null);

      const params = new URLSearchParams();
      
      // Add filters to params
      if (filters.search) params.append('search', filters.search);
      if (filters.category) params.append('category', filters.category);
      if (filters.city) params.append('city', filters.city);
      if (filters.min_price) params.append('min_price', filters.min_price);
      if (filters.max_price) params.append('max_price', filters.max_price);
      if (filters.min_discount) params.append('min_discount', filters.min_discount);
      if (filters.is_available) params.append('is_available', filters.is_available);
      if (filters.ordering) params.append('ordering', filters.ordering);
      
      params.append('page', currentPage);
      params.append('page_size', '5'); // 4x2 grid

      const response = await apiServer(`${API_ROUTES.PRODUCTS}?${params.toString()}`, 'GET');
      
      if (!response.error) {
        setProducts(response.data.results || response.data);
        setTotalResults(response.data.count || response.data.length);
        setTotalPages(Math.ceil((response.data.count || response.data.length) / 5));
      } else {
        setError(response.message);
      }
    } catch (err) {
      setError('Failed to fetch products');
    } finally {
      setLoading(false);
    }
  };

  const updateUrlParams = () => {
    const params = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value) params.set(key, value);
    });
    if (currentPage > 1) params.set('page', currentPage);
    setSearchParams(params);
  };

  const handleFilterChange = (key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setCurrentPage(1);
  };

  const clearAllFilters = () => {
    setFilters({
      search: '',
      category: '',
      city: '',
      min_price: '',
      max_price: '',
      min_discount: '',
      is_available: '',
      ordering: '-created_at'
    });
    setSearchInput('');
    setPriceRange({ min: 0, max: 10000 });
    setCurrentPage(1);
  };

  const removeFilter = (key) => {
    setFilters(prev => ({ ...prev, [key]: '' }));
    if (key === 'search') setSearchInput('');
  };

  const handleProductClick = (product) => {
    console.log('handleProductClick called with:', product);
  console.log('Navigating to:', `/products/${product.id}`);

    navigate(`/products/${product.id}`);
  };

  const getActiveFiltersCount = () => {
    return Object.entries(filters).filter(([key, value]) => 
      value && key !== 'ordering'
    ).length;
  };

  const renderPagination = () => {
    const pages = [];
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }

    return (
      <div className="flex items-center justify-center space-x-1 mt-8">
        <button
          onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
          disabled={currentPage === 1}
          className="px-3 py-2 rounded-lg border border-gray-300 text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ChevronLeft className="w-4 h-4" />
        </button>
        
        {pages.map(page => (
          <button
            key={page}
            onClick={() => setCurrentPage(page)}
            className={`px-4 py-2 rounded-lg font-medium ${
              currentPage === page
                ? 'bg-emerald-600 text-white'
                : 'border border-gray-300 text-gray-600 hover:bg-gray-50'
            }`}
          >
            {page}
          </button>
        ))}
        
        <button
          onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
          disabled={currentPage === totalPages}
          className="px-3 py-2 rounded-lg border border-gray-300 text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ChevronRight className="w-4 h-4" />
        </button>
      </div>
    );
  };

  const renderFilters = () => (
    <div className="space-y-6">
      {/* Category Filter */}
      <div>
        <h3 className="font-semibold text-gray-900 mb-3">Category</h3>
        <div className="space-y-2">
          <label className="flex items-center">
            <input
              type="radio"
              name="category"
              value=""
              checked={!filters.category}
              onChange={() => handleFilterChange('category', '')}
              className="mr-2 text-emerald-600"
            />
            All Categories
          </label>
          {categories.map(category => (
            <label key={category.id} className="flex items-center">
              <input
                type="radio"
                name="category"
                value={category.id}
                checked={filters.category === category.id.toString()}
                onChange={() => handleFilterChange('category', category.id.toString())}
                className="mr-2 text-emerald-600"
              />
              {category.name}
            </label>
          ))}
        </div>
      </div>

      {/* Price Range */}
      <div>
        <h3 className="font-semibold text-gray-900 mb-3">Price Range</h3>
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <input
              type="number"
              placeholder="Min"
              value={priceRange.min}
              onChange={(e) => setPriceRange(prev => ({ ...prev, min: parseInt(e.target.value) || 0 }))}
              className="w-20 px-3 py-2 border border-gray-300 rounded-lg"
            />
            <span>-</span>
            <input
              type="number"
              placeholder="Max"
              value={priceRange.max}
              onChange={(e) => setPriceRange(prev => ({ ...prev, max: parseInt(e.target.value) || 10000 }))}
              className="w-20 px-3 py-2 border border-gray-300 rounded-lg"
            />
            <button
              onClick={() => {
                handleFilterChange('min_price', priceRange.min.toString());
                handleFilterChange('max_price', priceRange.max.toString());
              }}
              className="px-3 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700"
            >
              Apply
            </button>
          </div>
        </div>
      </div>

      {/* Availability Filter */}
      <div>
        <h3 className="font-semibold text-gray-900 mb-3">Availability</h3>
        <div className="space-y-2">
          <label className="flex items-center">
            <input
              type="radio"
              name="availability"
              value=""
              checked={!filters.is_available}
              onChange={() => handleFilterChange('is_available', '')}
              className="mr-2 text-emerald-600"
            />
            All Products
          </label>
          <label className="flex items-center">
            <input
              type="radio"
              name="availability"
              value="true"
              checked={filters.is_available === 'true'}
              onChange={() => handleFilterChange('is_available', 'true')}
              className="mr-2 text-emerald-600"
            />
            In Stock
          </label>
          <label className="flex items-center">
            <input
              type="radio"
              name="availability"
              value="false"
              checked={filters.is_available === 'false'}
              onChange={() => handleFilterChange('is_available', 'false')}
              className="mr-2 text-emerald-600"
            />
            Out of Stock
          </label>
        </div>
      </div>

      {/* Discount Filter */}
      <div>
        <h3 className="font-semibold text-gray-900 mb-3">Minimum Discount</h3>
        <div className="space-y-2">
          {[10, 30, 50].map(discount => (
            <label key={discount} className="flex items-center">
              <input
                type="radio"
                name="discount"
                value={discount}
                checked={filters.min_discount === discount.toString()}
                onChange={() => handleFilterChange('min_discount', discount.toString())}
                className="mr-2 text-emerald-600"
              />
              {discount}%+ Off
            </label>
          ))}
        </div>
      </div>

      {/* City Filter */}
      <div>
        <h3 className="font-semibold text-gray-900 mb-3">Location</h3>
       <select
  value={filters.city}
  onChange={(e) => handleFilterChange('city', e.target.value)}
  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
>
  <option value="">All Cities</option>
  {Array.isArray(cities) && cities.map(city => (
    <option key={city.id} value={city.id}>{city.name}</option>
  ))}
</select>

      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
  <section className="relative h-96 bg-gradient-to-r from-emerald-800 to-teal-800 overflow-hidden">
        <div
          className="absolute inset-0 bg-cover bg-center opacity-30"
          style={{
            backgroundImage: "url('https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1920&h=600&fit=crop')"
          }}
        ></div>
        <div className="absolute inset-0 bg-black/20"></div>

        <div className="relative z-10 flex items-center justify-center h-full">
          <div className="text-center text-white px-4 max-w-4xl">
            <h1 className="text-5xl md:text-6xl font-bold mb-6">
              Explore <span className="bg-gradient-to-r from-emerald-300 to-teal-300 bg-clip-text text-transparent">Products</span>
            </h1>
            <p className="text-xl md:text-2xl text-gray-200 max-w-2xl mx-auto">
Discover authentic flavors and dining experiences from traditional Balti cuisine to modern continental dishes.
            </p>
          </div>
        </div>
      </section>
      
      {/* <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">Products</h1>
            <p className="text-gray-600 mt-2">Discover authentic products from Gilgit-Baltistan</p>
          </div>
        </div>
      </div> */}

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Sidebar Filters - Desktop */}
          <div className="hidden lg:block w-80 flex-shrink-0">
            <div className="bg-white rounded-2xl shadow-lg p-6 sticky top-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">Filters</h2>
                {getActiveFiltersCount() > 0 && (
                  <button
                    onClick={clearAllFilters}
                    className="text-emerald-600 hover:text-emerald-700 font-medium"
                  >
                    Clear All
                  </button>
                )}
              </div>
              {renderFilters()}
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1">
            {/* Search and Sort Bar */}
            <div className="bg-white rounded-2xl shadow-lg p-6 mb-8">
              <div className="flex flex-col sm:flex-row gap-4">
                {/* Search Bar */}
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search by name, category or city..."
                    value={searchInput}
                    onChange={(e) => setSearchInput(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                  />
                </div>

                {/* Sort Dropdown */}
                <div className="relative">
                  <select
                    value={filters.ordering}
                    onChange={(e) => handleFilterChange('ordering', e.target.value)}
                    className="appearance-none bg-white border border-gray-300 rounded-xl px-4 py-3 pr-8 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                  >
                    <option value="-created_at">Latest</option>
                    <option value="price">Price: Low to High</option>
                    <option value="-price">Price: High to Low</option>
                    <option value="-discount_price">Discounted First</option>
                  </select>
                  <ChevronDown className="absolute right-3 top-3 h-5 w-5 text-gray-400 pointer-events-none" />
                </div>

                {/* Mobile Filter Button */}
                <button
                  onClick={() => setShowMobileFilters(true)}
                  className="lg:hidden flex items-center gap-2 px-4 py-3 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700"
                >
                  <Filter className="w-5 h-5" />
                  Filters
                  {getActiveFiltersCount() > 0 && (
                    <span className="bg-white text-emerald-600 rounded-full px-2 py-1 text-xs font-semibold">
                      {getActiveFiltersCount()}
                    </span>
                  )}
                </button>
              </div>
            </div>

            {/* Active Filters */}
            {getActiveFiltersCount() > 0 && (
              <div className="flex flex-wrap gap-2 mb-6">
                {Object.entries(filters).map(([key, value]) => {
                  if (!value || key === 'ordering') return null;
                  
                  let displayValue = value;
                  if (key === 'category') {
                    const cat = categories.find(c => c.id.toString() === value);
                    displayValue = cat ? cat.name : value;
                  } else if (key === 'city') {
                    const city = cities.find(c => c.id.toString() === value);
                    displayValue = city ? city.name : value;
                  } else if (key === 'min_discount') {
                    displayValue = `${value}%+ Off`;
                  } else if (key === 'is_available') {
                    displayValue = value === 'true' ? 'In Stock' : 'Out of Stock';
                  }

                  return (
                    <span
                      key={key}
                      className="inline-flex items-center gap-1 px-3 py-1 bg-emerald-100 text-emerald-700 rounded-full text-sm font-medium"
                    >
                      {displayValue}
                      <button
                        onClick={() => removeFilter(key)}
                        className="hover:text-emerald-900"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </span>
                  );
                })}
              </div>
            )}

            {/* Results Count */}
            <div className="mb-6">
              <p className="text-gray-600">
                Showing {products.length} of {totalResults} results
                {filters.search && ` for "${filters.search}"`}
              </p>
            </div>

            {/* Products Grid */}
            {loading ? (
              <div className="flex justify-center items-center py-16">
                <Loader />
              </div>
            ) : error ? (
              <ErrorMessage message={error} />
            ) : products.length === 0 ? (
              <div className="text-center py-16">
                <Package className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-600 mb-2">No products found</h3>
                <p className="text-gray-500 mb-6">Try adjusting your filters or search terms</p>
                <button
                  onClick={clearAllFilters}
                  className="bg-emerald-600 text-white px-6 py-3 rounded-xl hover:bg-emerald-700"
                >
                  Clear Filters
                </button>
              </div>
            ) : (
              <>
                <div className="grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-3 gap-6">
                  {products.map(product => (
                    <ProductCard
                      key={product.id}
                      product={product}
                      showActions={false}
                      onViewDetails={handleProductClick}
                    />
                  ))}
                </div>
                
                {/* Pagination */}
                {totalPages > 1 && renderPagination()}
              </>
            )}
          </div>
        </div>
      </div>

      {/* Mobile Filter Drawer */}
      {showMobileFilters && (
        <div className="fixed inset-0 z-50 lg:hidden">
          <div className="fixed inset-0 bg-black/50" onClick={() => setShowMobileFilters(false)} />
          <div className="fixed right-0 top-0 h-full w-80 bg-white shadow-xl transform transition-transform">
            <div className="flex items-center justify-between p-6 border-b">
              <h2 className="text-xl font-semibold">Filters</h2>
              <button
                onClick={() => setShowMobileFilters(false)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            <div className="p-6 overflow-y-auto h-full pb-20">
              {renderFilters()}
            </div>
            <div className="absolute bottom-0 left-0 right-0 p-6 bg-white border-t">
              <div className="flex gap-3">
                <button
                  onClick={clearAllFilters}
                  className="flex-1 py-3 border border-gray-300 rounded-xl font-semibold text-gray-700 hover:bg-gray-50"
                >
                  Clear All
                </button>
                <button
                  onClick={() => setShowMobileFilters(false)}
                  className="flex-1 py-3 bg-emerald-600 text-white rounded-xl font-semibold hover:bg-emerald-700"
                >
                  Apply
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductListPage;
import { useState, useEffect } from "react";
import apiServer from "../utils/apiServer";
import API_ROUTES from "../apiRoutes";

const useProducts = (options = {}) => {
    const {
        fetchMyProducts = false,
        productId = null,
        fetchCategories = false,
        refetch = false
    } = options;

    const [products, setProducts] = useState([]);
    const [product, setProduct] = useState(null);
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                setError(null);
                let response;

                if (fetchMyProducts) {
                    response = await apiServer(API_ROUTES.MY_PRODUCTS, "GET");
                    if (!response.error) {
                        setProducts(response.data.results || response.data || []);
                    } else {
                        setError(response.message || "Failed to fetch your products");
                    }
                }
                else if (productId) {
                    response = await apiServer(`${API_ROUTES.PRODUCTS}${productId}/`, "GET");
                    if (!response.error) {
                        setProduct(response.data);
                    } else {
                        setError(response.message || "Failed to fetch product details");
                    }
                }
                else {
                    response = await apiServer(API_ROUTES.PRODUCTS, "GET");
                    if (!response.error) {
                        setProducts(response.data.results || response.data || []);
                    } else {
                        setError(response.message || "Failed to fetch products");
                    }
                }

                // ‚úÖ Normalize categories
                if (fetchCategories) {
                    const catRes = await apiServer(API_ROUTES.PRODUCT_CATEGORIES, "GET");
                    if (!catRes.error) {
                        const categoriesData = Array.isArray(catRes.data)
                            ? catRes.data
                            : catRes.data?.results || [];
                     setCategories(catRes.data.results || catRes.data || []);

                    } else {
                        setCategories([]);
                    }
                }
            } catch (err) {
                console.error("Error in useProducts:", err);
                setError("Failed to fetch data");
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [fetchMyProducts, productId, fetchCategories, refetch]);

    const deleteProduct = async (productId) => {
        try {
            const response = await apiServer(`${API_ROUTES.PRODUCTS}${productId}/`, "DELETE");
            if (!response.error) {
                setProducts(prev => prev.filter(product => product.id !== productId));
                return { success: true };
            } else {
                return { success: false, error: response.message };
            }
        } catch (err) {
            console.error("Error deleting product:", err);
            return { success: false, error: "Failed to delete product" };
        }
    };

    const refreshProducts = () => {
        setLoading(true);
        setError(null);
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 100);
        });
    };

    return {
        products,
        setProducts,
        product,
        categories,
        loading,
        error,
        deleteProduct,
        refreshProducts
    };
};

export default useProducts;

import React, { useState, useEffect } from "react";
import { X } from "lucide-react";
import apiServer from "../../utils/apiServer"; // Adjust path as needed
import API_ROUTES from "../../apiRoutes"; // Adjust path as needed

const AddEditForm = ({ editingItem, setShowAddForm, restaurants, setRestaurants, products, setProducts }) => {
  const [formData, setFormData] = useState(() => {
    if (editingItem?.item) {
      // Pre-populate form for editing
      const item = editingItem.item;
      if (editingItem.type === 'restaurant') {
        return {
          name: item.name || '',
          restaurant_type: item.restaurant_type || '',
          city: item.city || '',
          location_inside_city: item.location_inside_city || '',
          description: item.description || '',
          room_available: item.room_available || false,
          is_active: item.is_active || false,
          contacts_and_hours: Array.isArray(item.contacts_and_hours)
            ? item.contacts_and_hours.join(', ')
            : item.contacts_and_hours || '',
          amenities: Array.isArray(item.amenities)
            ? item.amenities.join(', ')
            : item.amenities || '',
          get_direction: item.get_direction || '',
          whatsapp_number: item.whatsapp_number || '',
          image: null // For file upload
        };
      }
      return item; // For products
    }

    // Default empty form
    return editingItem?.type === 'restaurant'
      ? {
        name: '',
        restaurant_type: '',
        city: '',
        location_inside_city: '',
        description: '',
        room_available: false,
        is_active: false,
        contacts_and_hours: '',
        amenities: '',
        get_direction: '',
        whatsapp_number: '',
        image: null
      }
      : {
        name: '',
        category: '',
        price: '',
        stock: '',
        image: '',
        description: ''
      };
  });

  const [cities, setCities] = useState([]);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const isEditing = !!editingItem?.item;
  const isRestaurant = editingItem?.type === 'restaurant';

  // Fetch cities for restaurant form
  useEffect(() => {
    if (isRestaurant) {
      fetchCities();
    }
  }, [isRestaurant]);

  const fetchCities = async () => {
    try {
      const response = await apiServer(API_ROUTES.CITIES, 'GET');
      if (!response.error) {
        setCities(response.data);
      }
    } catch (error) {
      console.error('Error fetching cities:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrors({});

    if (isRestaurant) {
      await handleRestaurantSubmit();
    } else {
      handleProductSubmit();
    }

    setLoading(false);
  };

  const handleRestaurantSubmit = async () => {
    try {
      // Prepare form data for API
      const submitData = new FormData();

      // Basic fields
      submitData.append('name', formData.name);
      submitData.append('restaurant_type', formData.restaurant_type);
      submitData.append('city', formData.city);
      submitData.append('location_inside_city', formData.location_inside_city);
      submitData.append('description', formData.description);
      submitData.append('room_available', formData.room_available);
      submitData.append('is_active', formData.is_active);
      submitData.append('get_direction', formData.get_direction);
      submitData.append('whatsapp_number', formData.whatsapp_number);

      // Convert comma-separated strings to arrays for JSON fields
      if (formData.contacts_and_hours) {
        const contactsArray = formData.contacts_and_hours.split(',').map(item => item.trim()).filter(item => item);
        submitData.append('contacts_and_hours', JSON.stringify(contactsArray));
      }

      if (formData.amenities) {
        const amenitiesArray = formData.amenities.split(',').map(item => item.trim()).filter(item => item);
        submitData.append('amenities', JSON.stringify(amenitiesArray));
      }

      // Handle image upload
      if (formData.image instanceof File) {
        submitData.append('image', formData.image);
      }

      let response;
      if (isEditing) {
        // Update restaurant
        response = await apiServer(
          `${API_ROUTES.RESTAURANTS}${editingItem.item.id}/`,
          'PATCH',
          submitData
        );
      } else {
        // Create restaurant
        response = await apiServer(
          API_ROUTES.RESTAURANTS,
          'POST',
          submitData
        );
      }

      if (!response.error) {
        if (isEditing) {
          // Update local state
          setRestaurants(restaurants.map(r =>
            r.id === editingItem.item.id
              ? { ...r, ...response.data }
              : r
          ));
        } else {
          // Add to local state
          setRestaurants([response.data, ...restaurants]);
        }
        setShowAddForm(false);
      } else {
        // Handle API errors
        if (response.status === 400 && typeof response.message === 'object') {
          setErrors(response.message);
        } else {
          setErrors({ general: response.message });
        }
      }
    } catch (error) {
      console.error('Error submitting restaurant:', error);
      setErrors({ general: 'An unexpected error occurred' });
    }
  };

  const handleProductSubmit = () => {
    // Keep existing product logic
    if (isEditing) {
      setProducts(products.map(p =>
        p.id === editingItem.item.id
          ? { ...p, ...formData }
          : p
      ));
    } else {
      const newProduct = {
        ...formData,
        id: Date.now(),
        status: parseInt(formData.stock) > 0 ? 'In Stock' : 'Out of Stock',
        sales: 0
      };
      setProducts([...products, newProduct]);
    }
    setShowAddForm(false);
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData({ ...formData, image: file });
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white border-b p-6 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {isEditing ? 'Edit' : 'Add'} {isRestaurant ? 'Restaurant' : 'Product'}
            </h2>
            <button
              onClick={() => setShowAddForm(false)}
              className="text-gray-400 hover:text-gray-600 p-2"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* General Error */}
          {errors.general && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
              {errors.general}
            </div>
          )}

          {/* Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              {isRestaurant ? 'Restaurant Name' : 'Product Name'} *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.name ? 'border-red-300' : 'border-gray-300'
                }`}
              placeholder={`Enter ${isRestaurant ? 'restaurant' : 'product'} name`}
              required
            />
            {errors.name && (
              <p className="mt-1 text-sm text-red-600">{errors.name[0]}</p>
            )}
          </div>

          {/* Restaurant specific fields */}
          {isRestaurant && (
            <>
              {/* Restaurant Type */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Restaurant Type *</label>
                <select
                  value={formData.restaurant_type}
                  onChange={(e) => setFormData({ ...formData, restaurant_type: e.target.value })}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.restaurant_type ? 'border-red-300' : 'border-gray-300'
                    }`}
                  required
                >
                  <option value="">Select restaurant type</option>
                  <option value="restaurant">Restaurant</option>
                  <option value="hotel">Hotel & Guest House</option>
                  <option value="local_traditional">Local & Traditional</option>
                  <option value="cafe">Cafe</option>
                </select>
                {errors.restaurant_type && (
                  <p className="mt-1 text-sm text-red-600">{errors.restaurant_type[0]}</p>
                )}
              </div>

              {/* City */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">City</label>
                <select
                  value={formData.city}
                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.city ? 'border-red-300' : 'border-gray-300'
                    }`}
                >
                  <option value="">Select city</option>
                  {cities.map(city => (
                    <option key={city.id} value={city.id}>{city.name}</option>
                  ))}
                </select>
                {errors.city && (
                  <p className="mt-1 text-sm text-red-600">{errors.city[0]}</p>
                )}
              </div>

              {/* Location Inside City */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Location Inside City</label>
                <input
                  type="text"
                  value={formData.location_inside_city}
                  onChange={(e) => setFormData({ ...formData, location_inside_city: e.target.value })}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.location_inside_city ? 'border-red-300' : 'border-gray-300'
                    }`}
                  placeholder="e.g., Near Main Bazaar, City Center"
                />
                {errors.location_inside_city && (
                  <p className="mt-1 text-sm text-red-600">{errors.location_inside_city[0]}</p>
                )}
              </div>

              {/* Room Available */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="room_available"
                  checked={formData.room_available}
                  onChange={(e) => setFormData({ ...formData, room_available: e.target.checked })}
                  className="h-4 w-4 text-emerald-600 focus:ring-emerald-500 border-gray-300 rounded"
                />
                <label htmlFor="room_available" className="ml-2 block text-sm text-gray-900">
                  Room Available
                </label>
              </div>

              {/* is_active */}

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="is_active"
                  checked={formData.is_active}
                  onChange={(e) => setFormData({ ...formData, is_active: e.target.checked })}
                  className="h-4 w-4 text-emerald-600 focus:ring-emerald-500 border-gray-300 rounded"
                />
                <label htmlFor="room_available" className="ml-2 block text-sm text-gray-900">
                  is active
                </label>
              </div>

              {/* Contacts and Hours */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contacts & Hours
                </label>
                <textarea
                  value={formData.contacts_and_hours}
                  onChange={(e) => setFormData({ ...formData, contacts_and_hours: e.target.value })}
                  rows={3}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.contacts_and_hours ? 'border-red-300' : 'border-gray-300'
                    }`}
                  placeholder="Enter contact details and opening hours separated by commas (e.g., +92 300 1234567, Open 9 AM - 11 PM, info@restaurant.com)"
                />
                {errors.contacts_and_hours && (
                  <p className="mt-1 text-sm text-red-600">{errors.contacts_and_hours[0]}</p>
                )}
              </div>

              {/* Amenities */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Amenities
                </label>
                <textarea
                  value={formData.amenities}
                  onChange={(e) => setFormData({ ...formData, amenities: e.target.value })}
                  rows={2}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.amenities ? 'border-red-300' : 'border-gray-300'
                    }`}
                  placeholder="Enter amenities separated by commas (e.g., WiFi, Parking, AC, Garden Seating)"
                />
                {errors.amenities && (
                  <p className="mt-1 text-sm text-red-600">{errors.amenities[0]}</p>
                )}
              </div>

              {/* WhatsApp Number */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">WhatsApp Number</label>
                <input
                  type="text"
                  value={formData.whatsapp_number}
                  onChange={(e) => setFormData({ ...formData, whatsapp_number: e.target.value })}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.whatsapp_number ? 'border-red-300' : 'border-gray-300'
                    }`}
                  placeholder="923001234567 (without + sign)"
                />
                {errors.whatsapp_number && (
                  <p className="mt-1 text-sm text-red-600">{errors.whatsapp_number[0]}</p>
                )}
              </div>

              {/* Get Direction URL */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Google Maps Direction URL</label>
                <input
                  type="url"
                  value={formData.get_direction}
                  onChange={(e) => setFormData({ ...formData, get_direction: e.target.value })}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.get_direction ? 'border-red-300' : 'border-gray-300'
                    }`}
                  placeholder="https://maps.google.com/..."
                />
                {errors.get_direction && (
                  <p className="mt-1 text-sm text-red-600">{errors.get_direction[0]}</p>
                )}
              </div>

              {/* Image Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Restaurant Image</label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileChange}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.image ? 'border-red-300' : 'border-gray-300'
                    }`}
                />
                {errors.image && (
                  <p className="mt-1 text-sm text-red-600">{errors.image[0]}</p>
                )}
              </div>
            </>
          )}

          {/* Product specific fields (keep existing logic) */}
          {!isRestaurant && (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                  required
                >
                  <option value="">Select category</option>
                  <option value="Dry Fruits">Dry Fruits</option>
                  <option value="Handicrafts">Handicrafts</option>
                  <option value="Gemstones">Gemstones</option>
                  <option value="Traditional Clothes">Traditional Clothes</option>
                  <option value="Spices">Spices</option>
                </select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Price</label>
                  <input
                    type="text"
                    value={formData.price}
                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                    placeholder="e.g., Rs. 1,200/kg"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Stock Quantity</label>
                  <input
                    type="number"
                    value={formData.stock}
                    onChange={(e) => setFormData({ ...formData, stock: e.target.value })}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                    placeholder="0"
                    min="0"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Image URL</label>
                <input
                  type="url"
                  value={formData.image}
                  onChange={(e) => setFormData({ ...formData, image: e.target.value })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                  placeholder="https://example.com/image.jpg"
                  required
                />
              </div>
            </>
          )}

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              rows={4}
              className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors ${errors.description ? 'border-red-300' : 'border-gray-300'
                }`}
              placeholder={`Describe your ${isRestaurant ? 'restaurant' : 'product'}...`}
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description[0]}</p>
            )}
          </div>

          {/* Form Actions */}
          <div className="flex space-x-4 pt-4">
            <button
              type="button"
              onClick={() => setShowAddForm(false)}
              className="flex-1 bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-colors"
              disabled={loading}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="flex-1 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-3 px-6 rounded-lg font-semibold hover:shadow-lg transition-all duration-200 disabled:opacity-50"
              disabled={loading}
            >
              {loading ? 'Saving...' : `${isEditing ? 'Update' : 'Add'} ${isRestaurant ? 'Restaurant' : 'Product'}`}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddEditForm;
import React, { useState, useEffect } from "react";
import { AddEditForm } from "../components";
import {
  Mail,
  Phone,
  MapPin,
  Utensils,
  Package,
} from "lucide-react";
import { useAuth } from "../context/AuthContext";
import RestaurantCard from"../components/common/RestaurantCard";
import apiServer from "../utils/apiServer";
import API_ROUTES from "../apiRoutes";

const ProfilePage = () => {
  const { user } = useAuth();
  console.log("Profile page user =>", user);

  const [activeTab, setActiveTab] = useState("restaurants");
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);

  const [restaurants, setRestaurants] = useState([]); // Backend se fetch
  const [loading, setLoading] = useState(false);


      // Sample user data
    const userData = {
        name: "",
        email: "ahmad.khan@gbguide.com",
        phone: "",
        location: "Skardu, Baltistan",
        joinDate: "January 2024",
        userType: 'tourist',
        stats: {
            restaurants: "", // Updated to reflect the number of restaurants
            products: 12,
            reviews: 45,
            rating: 4.8
        },
    };
  // Sample products data (static for now)
  const [products, setProducts] = useState([
    {
      id: 1,
      name: "Premium Apricots",
      category: "Dry Fruits",
      price: "Rs. 1,200/kg",
      stock: 50,
      image:
        "https://images.unsplash.com/photo-1605032687614-0e0e21a22750?w=300&h=300&fit=crop",
      status: "In Stock",
      sales: 145,
    },
    {
      id: 2,
      name: "Traditional Shawl",
      category: "Handicrafts",
      price: "Rs. 3,500",
      stock: 12,
      image:
        "https://images.unsplash.com/photo-1594736797933-d0401ba2fe65?w=300&h=300&fit=crop",
      status: "Low Stock",
      sales: 23,
    },
  ]);

  // Fetch My Restaurants
  useEffect(() => {
    if (user?.role === "business_owner") {
      fetchMyRestaurants();
    }
  }, [user]);

  const fetchMyRestaurants = async () => {
    try {
      setLoading(true);
      const res = await apiServer(API_ROUTES.MY_RESTAURANTS, "GET");
      if (!res.error) {
        console.log("Fetched my restaurants:", res.data);
        setRestaurants(res.data);
      } else {
        console.error("Error fetching my restaurants:", res.message);
      }
    } catch (err) {
      console.error("Fetch error:", err);
    } finally {
      setLoading(false);
    }
  };



const handleDelete = async (type, id) => {
  if (!window.confirm(`Are you sure you want to delete this ${type}?`)) return;

  try {
    let response;

    if (type === "restaurant") {
      // üü¢ DELETE /business/restaurants/{id}/
      response = await apiServer(`${API_ROUTES.RESTAURANTS}${id}/`, "DELETE");

      if (!response.error) {
        setRestaurants(prev => prev.filter(r => r.id !== id));
      } else {
        console.error("Delete restaurant failed:", response.message);
      }
    } 
    
    else if (type === "product") {
      // agar products ka API_ROUTES nahi hai to add karo:
      // PRODUCTS: '/business/products/',
      response = await apiServer(`${API_ROUTES.PRODUCTS}${id}/`, "DELETE");

      if (!response.error) {
        setProducts(prev => prev.filter(p => p.id !== id));
      } else {
        console.error("Delete product failed:", response.message);
      }
    }

  } catch (error) {
    console.error("Delete failed:", error);
  }
};



  const handleEdit = (type, item) => {
    setEditingItem({ type, item });
    setShowAddForm(true);
  };

  const handleAdd = (type) => {
    setEditingItem({ type, item: null });
    setShowAddForm(true);
  };

  const handleViewDetails = (restaurant) => {
    console.log(`View details for restaurant: ${restaurant.name}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-emerald-50">
      {/* Hero Section */}
      <section className="relative h-96 bg-gradient-to-r from-emerald-800 to-teal-800 overflow-hidden">
        <div
          className="absolute inset-0 bg-cover bg-center opacity-30"
          style={{
            backgroundImage:
              "url('https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1920&h=600&fit=crop')",
          }}
        ></div>
        <div className="absolute inset-0 bg-black/20"></div>

        <div className="relative -mt-10 z-10 flex items-center justify-center h-full">
          <div className="text-center text-white px-4 max-w-4xl">
            <h1 className="text-6xl md:text-6xl font-bold mb-6">
              WELCOME{" "}
              <span className="bg-gradient-to-r from-emerald-300 to-teal-300 bg-clip-text text-transparent">
                {user?.username?.toUpperCase()}
              </span>
            </h1>
            <p className="text-xl md:text-xl text-gray-200 max-w-2xl mx-auto">
              Manage your business, in one place.
            </p>
          </div>
        </div>
      </section>

      {/* Profile Card */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-36 relative z-20">
        <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-8 md:p-12">
          <div className="flex flex-col lg:flex-row items-center lg:items-start space-y-6 lg:space-y-0 lg:space-x-8">
            {/* Profile Picture */}
            <div className="relative flex-shrink-0">
              <div className="w-32 h-32 rounded-full flex items-center justify-center bg-emerald-500 ring-4 ring-emerald-500 ring-offset-4 ring-offset-white text-white font-bold text-5xl">
                {user?.username?.charAt(0)?.toUpperCase()}
              </div>
            </div>

            {/* Profile Info */}
            <div className="flex-1 text-center lg:text-left">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-4">
                <div>
                  <h2 className="text-3xl font-bold text-slate-900 mb-2">
                    {user?.username}
                  </h2>
                  <div className="flex items-center justify-center lg:justify-start space-x-2 mb-2">
                    <span className="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm font-semibold">
                      {user?.role}
                    </span>
                  </div>
                </div>
                <button className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200">
                  Edit Profile
                </button>
              </div>

              <div className="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-6 text-slate-600 mb-6">
                <div className="flex items-center justify-center lg:justify-start space-x-2">
                  <Mail className="h-4 w-4 text-emerald-600" />
                  <span>{user?.email}</span>
                </div>
                <div className="flex items-center justify-center lg:justify-start space-x-2">
                  <Phone className="h-4 w-4 text-emerald-600" />
                  <span>{user?.phone || "N/A"}</span>
                </div>
                <div className="flex items-center justify-center lg:justify-start space-x-2">
                  <MapPin className="h-4 w-4 text-emerald-600" />
                  <span>Skardu, Baltistan</span>
                </div>
              </div>

              
                            {/* Stats */}
                            {user?.role === "business_owner" && (
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div className="bg-gradient-to-br from-emerald-50 to-teal-50 p-4 rounded-xl text-center border border-emerald-100">
                                        <div className="text-2xl font-bold text-emerald-600"> {restaurants.length}</div>
                                        <div className="text-sm text-slate-600 font-medium">Restaurants</div>
                                    </div>
                                    <div className="bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-xl text-center border border-blue-100">
                                        <div className="text-2xl font-bold text-blue-600">{userData.stats.products}</div>
                                        <div className="text-sm text-slate-600 font-medium">Products</div>
                                    </div>
                                    <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-4 rounded-xl text-center border border-purple-100">
                                        <div className="text-2xl font-bold text-purple-600">{userData.stats.reviews}</div>
                                        <div className="text-sm text-slate-600 font-medium">Reviews</div>
                                    </div>
                                </div>
                            )}
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      {user?.role === "business_owner" && (
        <>
          <section className="bg-white/90 backdrop-blur-sm border-t shadow-sm sticky top-0 z-40">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex space-x-8">
                <button
                  onClick={() => setActiveTab("restaurants")}
                  className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-semibold transition-all duration-200 ${
                    activeTab === "restaurants"
                      ? "border-emerald-500 text-emerald-600"
                      : "border-transparent text-slate-600 hover:text-emerald-600 hover:border-emerald-200"
                  }`}
                >
                  <Utensils className="h-5 w-5" />
                  <span>My Restaurants ({restaurants.length})</span>
                </button>
                <button
                  onClick={() => setActiveTab("products")}
                  className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-semibold transition-all duration-200 ${
                    activeTab === "products"
                      ? "border-emerald-500 text-emerald-600"
                      : "border-transparent text-slate-600 hover:text-emerald-600 hover:border-emerald-200"
                  }`}
                >
                  <Package className="h-5 w-5" />
                  <span>My Products ({products.length})</span>
                </button>
              </div>
            </div>
          </section>

          <section className="py-12">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              {/* Restaurants Tab */}
              {activeTab === "restaurants" && (
                <div>
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
                    <h2 className="text-3xl font-bold text-slate-900 mb-4 sm:mb-0">
                      My Restaurants
                    </h2>
                    <button
                      onClick={() => handleAdd("restaurant")}
                      className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200 flex items-center space-x-2"
                    >
                      <svg
                        className="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 4v16m8-8H4"
                        />
                      </svg>
                      <span>Add Restaurant</span>
                    </button>
                  </div>

                  {loading ? (
                    <p className="text-center text-slate-500">Loading...</p>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {restaurants.map((restaurant) => (
                     <RestaurantCard
  key={restaurant.id}
  restaurant={{
    id: restaurant.id,
    name: restaurant.name,
    type: restaurant.restaurant_type,
    location: restaurant.location_inside_city,
    status: restaurant.is_active ? "Active" : "Not Active",
    roomsAvailable: restaurant.room_available,
    description: restaurant.description,
    images: restaurant.image ? [restaurant.image] : [
      "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=600&fit=crop"
    ]
  }}
  showActions={user?.role === "business_owner"}
  onEdit={() => handleEdit("restaurant", restaurant)}
  onDelete={() => handleDelete("restaurant", restaurant.id)}
  onViewDetails={() => handleViewDetails(restaurant)}
/>

                      ))}
                    </div>
                  )}

                  {restaurants.length === 0 && !loading && (
                    <div className="text-center py-16">
                      <Utensils className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                      <h3 className="text-xl font-semibold text-slate-600 mb-2">
                        No restaurants yet
                      </h3>
                      <p className="text-slate-500 mb-6">
                        Start by adding your first restaurant
                      </p>
                      <button
                        onClick={() => handleAdd("restaurant")}
                        className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200"
                      >
                        Add Your First Restaurant
                      </button>
                    </div>
                  )}
                </div>
              )}

              {/* Products Tab */}
              {activeTab === "products" && (
                <div>
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
                    <h2 className="text-3xl font-bold text-slate-900 mb-4 sm:mb-0">
                      My Products
                    </h2>
                    <button
                      onClick={() => handleAdd("product")}
                      className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200 flex items-center space-x-2"
                    >
                      <svg
                        className="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 4v16m8-8H4"
                        />
                      </svg>
                      <span>Add Product</span>
                    </button>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    {products.map((product) => (
                      <div
                        key={product.id}
                        className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl hover:scale-105 transition-all duration-300"
                      >
                        <div className="relative h-48">
                          <img
                            src={product.image}
                            alt={product.name}
                            className="w-full h-full object-cover"
                          />
                        </div>

                        <div className="p-4">
                          <h3 className="text-lg font-bold text-slate-900 mb-2">
                            {product.name}
                          </h3>
                          <div className="flex items-center justify-between mb-3">
                            <span className="text-xl font-bold text-emerald-600">
                              {product.price}
                            </span>
                            <span className="text-sm text-slate-600">
                              Stock: {product.stock}
                            </span>
                          </div>
                          <div className="text-sm text-slate-600 mb-4">
                            Sales: {product.sales} units
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </section>

          {showAddForm && (
            <AddEditForm
              editingItem={editingItem}
              setShowAddForm={setShowAddForm}
              restaurants={restaurants}
              setRestaurants={setRestaurants}
              products={products}
              setProducts={setProducts}
            />
          )}
        </>
      )}
    </div>
  );
};

export default ProfilePage;

// utils/weatherAPI.js

const WEATHER_API_KEY = 'e29fe44e9b114d0dbac111046251204';
const WEATHER_BASE_URL = 'https://api.weatherapi.com/v1';

// Simple city name mapping - add more as needed
const CITY_WEATHER_MAPPING = {
  'khaplu': ['Khapalu', 'ganche'],
  'gilgit': ['gilgit city'],
  'hunza': ['karimabad', 'hunza valley'],
  'skardu': ['skardhoo', 'skardu city'],
  'gailgit': ['gilgit'],  // Common misspelling
  'diamir': ['chilas'],   // District to main city


};

/**
 * Try weather API with city name and its alternatives
 * @param {string} cityName - Original city name
 * @returns {Promise<Object>} - API response
 */
const tryWeatherAPI = async (cityName, endpoint = 'current.json', params = {}) => {
  const alternatives = CITY_WEATHER_MAPPING[cityName.toLowerCase()] || [];
  const allVariants = [cityName, ...alternatives];
  
  console.log(`Trying weather API for "${cityName}" with variants:`, allVariants);
  
  let lastError;
  
  for (const variant of allVariants) {
    try {
      console.log(`Attempting weather API call for: ${variant}`);
      
      const queryParams = new URLSearchParams({
        key: WEATHER_API_KEY,
        q: variant,
        ...params
      });
      
      const response = await fetch(`${WEATHER_BASE_URL}/${endpoint}?${queryParams}`);
      console.log("weater data check",response)
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log(`‚úÖ Weather API successful for: ${variant} (original: ${cityName})`);
      return data;
      
    } catch (error) {
      console.log(`‚ùå Failed for ${variant}:`, error.message);
      lastError = error;
    }
  }
  
  // If all variants fail, throw detailed error
  throw new Error(
    `Weather data not available for '${cityName}'. Tried variants: ${allVariants.join(', ')}. Last error: ${lastError.message}`
  );
};

/**
 * Get weather icon based on condition code
 * @param {number} code - Weather condition code from API
 * @param {number} isDay - Whether it's day (1) or night (0)
 * @returns {string} - Emoji representation of weather
 */
export const getWeatherIcon = (code, isDay = 1) => {
  const weatherIcons = {
    1000: isDay ? '‚òÄÔ∏è' : 'üåô', // Sunny/Clear
    1003: 'üå§Ô∏è', // Partly cloudy
    1006: '‚òÅÔ∏è', // Cloudy
    1009: '‚òÅÔ∏è', // Overcast
    1030: 'üå´Ô∏è', // Mist
    1063: 'üå¶Ô∏è', // Patchy rain possible
    1066: 'üå®Ô∏è', // Patchy snow possible
    1069: 'üå®Ô∏è', // Patchy sleet possible
    1072: 'üå®Ô∏è', // Patchy freezing drizzle possible
    1087: '‚õàÔ∏è', // Thundery outbreaks possible
    1114: '‚ùÑÔ∏è', // Blowing snow
    1117: '‚ùÑÔ∏è', // Blizzard
    1135: 'üå´Ô∏è', // Fog
    1147: 'üå´Ô∏è', // Freezing fog
    1150: 'üå¶Ô∏è', // Patchy light drizzle
    1153: 'üå¶Ô∏è', // Light drizzle
    1168: 'üå®Ô∏è', // Freezing drizzle
    1171: 'üå®Ô∏è', // Heavy freezing drizzle
    1180: 'üå¶Ô∏è', // Patchy light rain
    1183: 'üåßÔ∏è', // Light rain
    1186: 'üå¶Ô∏è', // Moderate rain at times
    1189: 'üåßÔ∏è', // Moderate rain
    1192: 'üåßÔ∏è', // Heavy rain at times
    1195: 'üåßÔ∏è', // Heavy rain
    1198: 'üå®Ô∏è', // Light freezing rain
    1201: 'üå®Ô∏è', // Moderate or heavy freezing rain
    1204: 'üå®Ô∏è', // Light sleet
    1207: 'üå®Ô∏è', // Moderate or heavy sleet
    1210: '‚ùÑÔ∏è', // Patchy light snow
    1213: '‚ùÑÔ∏è', // Light snow
    1216: '‚ùÑÔ∏è', // Patchy moderate snow
    1219: '‚ùÑÔ∏è', // Moderate snow
    1222: '‚ùÑÔ∏è', // Patchy heavy snow
    1225: '‚ùÑÔ∏è', // Heavy snow
    1237: 'üßä', // Ice pellets
    1240: 'üå¶Ô∏è', // Light rain shower
    1243: 'üåßÔ∏è', // Moderate or heavy rain shower
    1246: 'üåßÔ∏è', // Torrential rain shower
    1249: 'üå®Ô∏è', // Light sleet showers
    1252: 'üå®Ô∏è', // Moderate or heavy sleet showers
    1255: '‚ùÑÔ∏è', // Light snow showers
    1258: '‚ùÑÔ∏è', // Moderate or heavy snow showers
    1261: 'üßä', // Light showers of ice pellets
    1264: 'üßä', // Moderate or heavy showers of ice pellets
    1273: '‚õàÔ∏è', // Patchy light rain with thunder
    1276: '‚õàÔ∏è', // Moderate or heavy rain with thunder
    1279: '‚õàÔ∏è', // Patchy light snow with thunder
    1282: '‚õàÔ∏è', // Moderate or heavy snow with thunder
  };
  
  return weatherIcons[code] || 'üå§Ô∏è';
};

/**
 * Format weather data from API response
 * @param {Object} data - Raw API response
 * @returns {Object} - Formatted weather data
 */
const formatWeatherData = (data) => {
  const current = data.current;
  const location = data.location;
  
  return {
    current: {
      temperature: `${Math.round(current.temp_c)}¬∞C`,
      condition: current.condition.text,
      icon: getWeatherIcon(current.condition.code, current.is_day),
      feelsLike: `${Math.round(current.feelslike_c)}¬∞C`,
      humidity: `${current.humidity}%`,
      windSpeed: `${Math.round(current.wind_kph)} km/h`,
      windDirection: current.wind_dir,
      pressure: `${current.pressure_mb} mb`,
      visibility: `${current.vis_km} km`,
      uvIndex: current.uv,
      lastUpdated: current.last_updated,
    },
    location: {
      name: location.name,
      region: location.region,
      country: location.country,
      localTime: location.localtime,
    }
  };
};

/**
 * Format forecast data from API response
 * @param {Object} data - Raw API response
 * @returns {Array} - Array of formatted forecast days
 */
const formatForecastData = (data) => {
  return data.forecast.forecastday.map(day => {
    const dayData = day.day;
    const date = new Date(day.date);
    
    return {
      date: day.date,
      dayName: date.toLocaleDateString('en-US', { weekday: 'short' }),
      fullDate: date.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      }),
      maxTemp: `${Math.round(dayData.maxtemp_c)}¬∞C`,
      minTemp: `${Math.round(dayData.mintemp_c)}¬∞C`,
      avgTemp: `${Math.round(dayData.avgtemp_c)}¬∞C`,
      condition: dayData.condition.text,
      icon: getWeatherIcon(dayData.condition.code, 1),
      chanceOfRain: `${dayData.daily_chance_of_rain}%`,
      chanceOfSnow: `${dayData.daily_chance_of_snow}%`,
      humidity: `${dayData.avghumidity}%`,
      windSpeed: `${Math.round(dayData.maxwind_kph)} km/h`,
      uvIndex: dayData.uv,
    };
  });
};

/**
 * Fetch current weather for a city
 * @param {string} cityName - Name of the city
 * @returns {Promise<Object>} - Current weather data
 */
export const getCurrentWeather = async (cityName) => {
  try {
    const data = await tryWeatherAPI(cityName, 'current.json', { aqi: 'no' });
    return formatWeatherData(data);
  } catch (error) {
    console.error(`Error fetching current weather for ${cityName}:`, error);
    throw error;
  }
};

/**
 * Fetch 5-day weather forecast for a city
 * @param {string} cityName - Name of the city
 * @param {number} days - Number of days to forecast (default: 5)
 * @returns {Promise<Object>} - Weather forecast data
 */
export const getWeatherForecast = async (cityName, days = 5) => {
  try {
    const data = await tryWeatherAPI(cityName, 'forecast.json', { 
      days, 
      aqi: 'no', 
      alerts: 'no' 
    });
    
    return {
      current: formatWeatherData(data).current,
      location: formatWeatherData(data).location,
      forecast: formatForecastData(data)
    };
  } catch (error) {
    console.error(`Error fetching weather forecast for ${cityName}:`, error);
    throw error;
  }
};

/**
 * Get complete weather data (current + forecast) for a city
 * @param {string} cityName - Name of the city
 * @returns {Promise<Object>} - Complete weather data
 */
export const getCompleteWeather = async (cityName) => {
  try {
    // Use forecast API which includes current weather + forecast in single call
    return await getWeatherForecast(cityName);
  } catch (error) {
    console.error(`Error fetching complete weather for ${cityName}:`, error);
    throw error;
  }
};

/**
 * Test if a city name works with weather API (useful for debugging)
 * @param {string} cityName - Name of the city to test
 * @returns {Promise<Object>} - Test result
 */
export const testCityName = async (cityName) => {
  try {
    await tryWeatherAPI(cityName, 'current.json', { aqi: 'no' });
    return { success: true, message: `Weather data available for '${cityName}'` };
  } catch (error) {
    return { success: false, message: error.message };
  }
};

// Helper function to get today's date in YYYY-MM-DD format
export const getTodayDate = () => {
  return new Date().toISOString().split('T')[0];
};

// Helper function to format date for display
export const formatDate = (dateString) => {
  const options = { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric',
    weekday: 'short'
  };
  return new Date(dateString).toLocaleDateString(undefined, options);
};
// utils/weatherAPI.js

const WEATHER_API_KEY = 'e29fe44e9b114d0dbac111046251204';
const WEATHER_BASE_URL = 'https://api.weatherapi.com/v1';

/**
 * Get weather icon based on condition code
 * @param {number} code - Weather condition code from API
 * @param {number} isDay - Whether it's day (1) or night (0)
 * @returns {string} - Emoji representation of weather
 */
export const getWeatherIcon = (code, isDay = 1) => {
  const weatherIcons = {
    1000: isDay ? '‚òÄÔ∏è' : 'üåô', // Sunny/Clear
    1003: 'üå§Ô∏è', // Partly cloudy
    1006: '‚òÅÔ∏è', // Cloudy
    1009: '‚òÅÔ∏è', // Overcast
    1030: 'üå´Ô∏è', // Mist
    1063: 'üå¶Ô∏è', // Patchy rain possible
    1066: 'üå®Ô∏è', // Patchy snow possible
    1069: 'üå®Ô∏è', // Patchy sleet possible
    1072: 'üå®Ô∏è', // Patchy freezing drizzle possible
    1087: '‚õàÔ∏è', // Thundery outbreaks possible
    1114: '‚ùÑÔ∏è', // Blowing snow
    1117: '‚ùÑÔ∏è', // Blizzard
    1135: 'üå´Ô∏è', // Fog
    1147: 'üå´Ô∏è', // Freezing fog
    1150: 'üå¶Ô∏è', // Patchy light drizzle
    1153: 'üå¶Ô∏è', // Light drizzle
    1168: 'üå®Ô∏è', // Freezing drizzle
    1171: 'üå®Ô∏è', // Heavy freezing drizzle
    1180: 'üå¶Ô∏è', // Patchy light rain
    1183: 'üåßÔ∏è', // Light rain
    1186: 'üå¶Ô∏è', // Moderate rain at times
    1189: 'üåßÔ∏è', // Moderate rain
    1192: 'üåßÔ∏è', // Heavy rain at times
    1195: 'üåßÔ∏è', // Heavy rain
    1198: 'üå®Ô∏è', // Light freezing rain
    1201: 'üå®Ô∏è', // Moderate or heavy freezing rain
    1204: 'üå®Ô∏è', // Light sleet
    1207: 'üå®Ô∏è', // Moderate or heavy sleet
    1210: '‚ùÑÔ∏è', // Patchy light snow
    1213: '‚ùÑÔ∏è', // Light snow
    1216: '‚ùÑÔ∏è', // Patchy moderate snow
    1219: '‚ùÑÔ∏è', // Moderate snow
    1222: '‚ùÑÔ∏è', // Patchy heavy snow
    1225: '‚ùÑÔ∏è', // Heavy snow
    1237: 'üßä', // Ice pellets
    1240: 'üå¶Ô∏è', // Light rain shower
    1243: 'üåßÔ∏è', // Moderate or heavy rain shower
    1246: 'üåßÔ∏è', // Torrential rain shower
    1249: 'üå®Ô∏è', // Light sleet showers
    1252: 'üå®Ô∏è', // Moderate or heavy sleet showers
    1255: '‚ùÑÔ∏è', // Light snow showers
    1258: '‚ùÑÔ∏è', // Moderate or heavy snow showers
    1261: 'üßä', // Light showers of ice pellets
    1264: 'üßä', // Moderate or heavy showers of ice pellets
    1273: '‚õàÔ∏è', // Patchy light rain with thunder
    1276: '‚õàÔ∏è', // Moderate or heavy rain with thunder
    1279: '‚õàÔ∏è', // Patchy light snow with thunder
    1282: '‚õàÔ∏è', // Moderate or heavy snow with thunder
  };
  
  return weatherIcons[code] || 'üå§Ô∏è';
};

/**
 * Format weather data from API response
 * @param {Object} data - Raw API response
 * @returns {Object} - Formatted weather data
 */
const formatWeatherData = (data) => {
  const current = data.current;
  const location = data.location;
  
  return {
    current: {
      temperature: `${Math.round(current.temp_c)}¬∞C`,
      condition: current.condition.text,
      icon: getWeatherIcon(current.condition.code, current.is_day),
      feelsLike: `${Math.round(current.feelslike_c)}¬∞C`,
      humidity: `${current.humidity}%`,
      windSpeed: `${Math.round(current.wind_kph)} km/h`,
      windDirection: current.wind_dir,
      pressure: `${current.pressure_mb} mb`,
      visibility: `${current.vis_km} km`,
      uvIndex: current.uv,
      lastUpdated: current.last_updated,
    },
    location: {
      name: location.name,
      region: location.region,
      country: location.country,
      localTime: location.localtime,
    }
  };
};

/**
 * Format forecast data from API response
 * @param {Object} data - Raw API response
 * @returns {Array} - Array of formatted forecast days
 */
const formatForecastData = (data) => {
  return data.forecast.forecastday.map(day => {
    const dayData = day.day;
    const date = new Date(day.date);
    
    return {
      date: day.date,
      dayName: date.toLocaleDateString('en-US', { weekday: 'short' }),
      fullDate: date.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      }),
      maxTemp: `${Math.round(dayData.maxtemp_c)}¬∞C`,
      minTemp: `${Math.round(dayData.mintemp_c)}¬∞C`,
      avgTemp: `${Math.round(dayData.avgtemp_c)}¬∞C`,
      condition: dayData.condition.text,
      icon: getWeatherIcon(dayData.condition.code, 1),
      chanceOfRain: `${dayData.daily_chance_of_rain}%`,
      chanceOfSnow: `${dayData.daily_chance_of_snow}%`,
      humidity: `${dayData.avghumidity}%`,
      windSpeed: `${Math.round(dayData.maxwind_kph)} km/h`,
      uvIndex: dayData.uv,
    };
  });
};

/**
 * Fetch current weather for a city
 * @param {string} cityName - Name of the city
 * @returns {Promise<Object>} - Current weather data
 */
export const getCurrentWeather = async (cityName) => {
  try {
    const response = await fetch(
      `${WEATHER_BASE_URL}/current.json?key=${WEATHER_API_KEY}&q=${encodeURIComponent(cityName)}&aqi=no`
    );
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    return formatWeatherData(data);
  } catch (error) {
    console.error(`Error fetching current weather for ${cityName}:`, error);
    throw new Error(`Failed to fetch weather data for ${cityName}`);
  }
};

/**
 * Fetch 5-day weather forecast for a city
 * @param {string} cityName - Name of the city
 * @param {number} days - Number of days to forecast (default: 5)
 * @returns {Promise<Object>} - Weather forecast data
 */
export const getWeatherForecast = async (cityName, days = 5) => {
  try {
    const response = await fetch(
      `${WEATHER_BASE_URL}/forecast.json?key=${WEATHER_API_KEY}&q=${encodeURIComponent(cityName)}&days=${days}&aqi=no&alerts=no`
    );
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    return {
      current: formatWeatherData(data).current,
      location: formatWeatherData(data).location,
      forecast: formatForecastData(data)
    };
  } catch (error) {
    console.error(`Error fetching weather forecast for ${cityName}:`, error);
    throw new Error(`Failed to fetch weather forecast for ${cityName}`);
  }
};

/**
 * Get complete weather data (current + forecast) for a city
 * @param {string} cityName - Name of the city
 * @returns {Promise<Object>} - Complete weather data
 */
export const getCompleteWeather = async (cityName) => {
  try {
    // Use forecast API which includes current weather + forecast in single call
    return await getWeatherForecast(cityName);
  } catch (error) {
    console.error(`Error fetching complete weather for ${cityName}:`, error);
    throw error;
  }
};

// Helper function to get today's date in YYYY-MM-DD format
export const getTodayDate = () => {
  return new Date().toISOString().split('T')[0];
};

// Helper function to format date for display
export const formatDate = (dateString) => {
  const options = { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric',
    weekday: 'short'
  };
  return new Date(dateString).toLocaleDateString(undefined, options);
};

import React, { useState, useEffect } from 'react';
import { ChevronLeft, Phone, Mail, Star, Clock, Wifi, Car, Users, Calendar, MessageCircle, Navigation, Bed, Shield, Award, MapPin } from 'lucide-react';
import { BookingForm } from '../components';
import useRestaurants from '../hooks/useRestaurants';
import Loader from '../components/common/Loader';
import ErrorMessage from "../components/common/ErrorMessage";

const RestaurantDetailPage = ({ restaurant: selectedRestaurantProp, onBack }) => {
  const [restaurant, setRestaurant] = useState(null);
  const [showBookingForm, setShowBookingForm] = useState(false);
  const { restaurants, loading, error } = useRestaurants();

  // ‚úÖ Fetch restaurant from backend if passed prop is just id or undefined
  useEffect(() => {
    if (selectedRestaurantProp?.id) {
      const found = restaurants.find(r => r.id === selectedRestaurantProp.id);
      if (found) setRestaurant(found);
      else setRestaurant(selectedRestaurantProp); // fallback
    }
  }, [selectedRestaurantProp, restaurants]);

  useEffect(() => {
    console.log('Restaurant details:', restaurant);
  }, [restaurant]);


  return (
    <div>

      {loading ? (
        <div className="flex justify-center items-center py-16">
          <Loader />
        </div>
      ) : error ? ( // ‚úÖ If API failed
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <ErrorMessage message="Failed to load cities. Please try again." />
        </div>
      ) : (
        <section className="py-3">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            {/* Hero section */}
            <div className="relative mb-8 rounded-2xl overflow-hidden shadow-xl">
              <img
                src={restaurant.image || "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=600&fit=crop"}
                alt={restaurant.name}
                className="w-full h-96 object-cover"
              />
              <div className="absolute bottom-6 left-6 text-white">
                <h1 className="text-4xl font-bold mb-2">{restaurant.name}</h1>
                <div className="flex items-center gap-4">


                </div>
              </div>
            </div>

            {/* Back button */}
            <div className="bg-white/90 backdrop-blur-sm border-b px-4 py-4">
              <div className="max-w-7xl mx-auto">
                <button
                  onClick={onBack}
                  className="flex items-center gap-2 text-emerald-600 hover:text-emerald-700 font-semibold group"
                >
                  <ChevronLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
                  Back to Restaurants
                </button>
              </div>



            </div>

            {/* Main content */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-6">
              <div className="lg:col-span-2 space-y-8">
                {/* About section */}
                <div className="bg-white rounded-2xl shadow-lg p-8">
                  <h2 className="text-2xl font-bold text-slate-900 mb-4">About This Restaurant</h2>
                  <p className="text-slate-700 leading-relaxed mb-6">{restaurant.description}</p>


                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">

                    {/* Contact & Hours */}
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900 mb-4">Contact & Hours</h3>
                      <div className="space-y-3">
                        {(restaurant.contacts_and_hours || []).map((value, idx) => {
                          const contactTypes = ['phone', 'email', 'location', 'hours'];
                          const type = contactTypes[idx];
                          let Icon;
                          switch (type) {
                            case 'phone': Icon = Phone; break;
                            case 'email': Icon = Mail; break;
                            case 'location': Icon = MapPin; break;
                            case 'hours': Icon = Clock; break;
                            default: Icon = null;
                          }
                          return (
                            <div key={idx} className="flex items-center gap-3">
                              {Icon && (
                                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center">
                                  <Icon className="w-4 h-4 text-emerald-600" />
                                </div>
                              )}
                              <span className="text-slate-700">{value}</span>
                            </div>
                          );
                        })}
                      </div>


                    </div>


                    {/* Amenities */}
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900 mb-4">Amenities</h3>
                      <div className="grid grid-cols-2 gap-3">
                        {restaurant.amenities?.map((amenity, index) => (
                          <div key={index} className="bg-slate-50 rounded-lg p-3 flex items-center gap-2">
                            {amenity === 'WiFi' && <Wifi className="w-4 h-4 text-blue-500" />}
                            {amenity === 'Parking' && <Car className="w-4 h-4 text-green-500" />}
                            {amenity === 'AC' && <div className="w-4 h-4 bg-cyan-500 rounded-full" />}
                            {!['WiFi', 'Parking', 'AC'].includes(amenity) && <div className="w-4 h-4 bg-orange-500 rounded-full" />}
                            <span className="text-slate-700 text-sm font-medium">{amenity}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Stats */}
                <div className="bg-white rounded-2xl shadow-lg p-8">
                  <h3 className="text-xl font-bold text-slate-900 mb-6">Restaurant Statistics</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">

                    {/* Room Status */}
                    <div className="bg-gradient-to-br from-emerald-50 to-teal-50 p-4 rounded-xl text-center border border-emerald-100">
                      <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-2">
                        <Bed className="w-4 h-4 text-emerald-600" />
                      </div>
                      <div className="absolute top-4 right-4">
                        <span
                          className={`flex items-center gap-1 px-3 py-1 rounded-full text-sm font-semibold backdrop-blur-sm ${restaurant.roomsAvailable
                              ? "bg-blue-100/90 text-blue-700"
                              : "bg-gray-100/90 text-gray-700"
                            }`}
                        >
                          <Bed className="w-4 h-4" />
                          {restaurant.roomsAvailable ? "Rooms Available" : "No Rooms"}
                        </span>
                      </div>
                      <div className="text-sm text-slate-600 mt-2">Room Status</div>
                    </div>

                    {/* Restaurant Type */}
                    <div className="bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-xl text-center border border-blue-100">
                      <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2">
                        <Award className="w-4 h-4 text-purple-600" />
                      </div>

                      <div className="text-xl font-bold text-orange-600">
                        {restaurant.restaurant_type}
                      </div>

                      <div className="text-sm text-slate-600 mt-2">Type</div>
                    </div>

                    {/* Active Status */}
                    <div className="bg-gradient-to-br from-orange-50 to-amber-50 p-4 rounded-xl text-center border border-orange-100">
                      <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-2">
                        <Shield className="w-4 h-4 text-orange-600" />
                      </div>
                      <div className="text-xl font-bold text-orange-600">
                        {restaurant.is_active ? "Active" : "Not Active"}
                      </div>
                      <div className="text-sm text-slate-600">Status</div>
                    </div>
                  </div>
                </div>

              </div>

              {/* Sidebar & Quick actions */}
              {/* Same as your current code, no changes needed, backend fields already mapped */}
              <div className="space-y-6">

                <div className="bg-gradient-to-br from-slate-50 to-blue-50 rounded-2xl p-6 border border-slate-200">
                  <h3 className="text-lg font-bold text-slate-900 mb-3">Need Help?</h3>
                  <p className="text-slate-600 text-sm mb-4">
                    Have questions about the menu, reservations, or special requests? Our friendly staff is here to help!
                  </p>
                  <div className="space-y-2">
                    {restaurant.whatsapp_link && (
                      <button
                        onClick={() =>
                          window.open(
                            `${restaurant.whatsapp_link}?text=Hi! I'm interested in your restaurant services.`,
                            "_blank"
                          )
                        }
                        className="group w-full relative overflow-hidden bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105"
                      >
                        <div className="absolute inset-0 bg-white/20 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 skew-x-12"></div>
                        <div className="relative flex items-center justify-center gap-3">
                          <MessageCircle className="w-5 h-5" />
                          <span>Chat on WhatsApp</span>
                        </div>
                      </button>
                    )}
                  </div>

                </div>
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-bold text-slate-900 mb-6">Quick Actions</h3>
                  <div className="space-y-4">


                    {restaurant.get_direction && (
                      <button
                        onClick={() => window.open(restaurant.get_direction, "_blank")}
                        className="group w-full relative overflow-hidden bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105"
                      >
                        <div className="absolute inset-0 bg-white/20 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 skew-x-12"></div>
                        <div className="relative flex items-center justify-center gap-3">
                          <Navigation className="w-5 h-5" />
                          <span>Get Directions</span>
                        </div>
                      </button>
                    )}


                    <button
                      onClick={() => setShowBookingForm(true)}
                      className="group w-full relative overflow-hidden bg-gradient-to-r from-purple-500 to-pink-600 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105"
                    >
                      <div className="absolute inset-0 bg-white/20 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 skew-x-12"></div>
                      <div className="relative flex items-center justify-center gap-3">
                        <Calendar className="w-5 h-5" />
                        <span>Book Now</span>
                      </div>
                    </button>
                  </div>
                </div>



              </div>
            </div>
          </div>
        </section>
      )}



      {/* Booking Form */}
      <BookingForm
        isOpen={showBookingForm}
        onClose={() => setShowBookingForm(false)}
      />
    </div>
  );
};

export default RestaurantDetailPage;

ek kam karo ya loder or erromesage ma sab jgy use kar raha hu so edr b same esko useo karo or final uodaed code da do muja
import { Bouncy } from 'ldrs/react'
import 'ldrs/react/Bouncy.css'
// import 'ldrs/bouncy';


const Loader = ({ size = 45, speed = 1.75, color = 'black', message = '' }) => {
    return (
        <div className="flex flex-col items-center justify-center py-10">
            <Bouncy size={size} speed={speed} color={color} />
            {message && <p className="mt-4 text-gray-600 text-sm">{message}</p>}
        </div>
    );
};

export default Loader;
// src/components/common/ErrorMessage.jsx
import { AlertCircle } from "lucide-react";

export default function ErrorMessage({ message = "Something went wrong.", showReload = true }) {
  return (
    <div className="flex flex-col items-center justify-center p-6 ">
      <AlertCircle className="text-red-500 w-10 h-10 mb-3" />
      <p className="text-red-700 font-semibold mb-2">{message}</p>
    
    </div>
  );
}

''''
current resutrantdetailpage

import React, { useState, useEffect } from 'react';
import { ChevronLeft, Phone, Mail, Star, Clock, Wifi, Car, Users, Calendar, MessageCircle, Navigation, Bed, Shield, Award, MapPin } from 'lucide-react';
import { BookingForm } from '../components';
import useRestaurants from '../hooks/useRestaurants';
import Loader from './components/common/Loader'
import ErrorMessage from "../components/common/ErrorMessage";
import { useParams } from "react-router-dom";

const RestaurantDetailPage = ({ restaurant: selectedRestaurantProp, onBack }) => {
    const { id } = useParams();
    const { restaurants, loading, error } = useRestaurants();

  const [restaurant, setRestaurant] = useState(selectedRestaurantProp || null);

  const [showBookingForm, setShowBookingForm] = useState(false);

  // ‚úÖ Fetch restaurant from backend if passed prop is just id or undefined
  useEffect(() => {
    if (!restaurant && id && restaurants.length > 0) {
      const found = restaurants.find(r => String(r.id) === String(id));
      if (found) setRestaurant(found);
    }
  }, [id, restaurants, restaurant]);

  useEffect(() => {
    console.log('Restaurant details:', restaurant);
  }, [restaurant]);


  return (
    <div>

      {loading ? (
        <div className="flex justify-center items-center py-16">
          <Loader />
        </div>
      ) : error ? ( // ‚úÖ If API failed
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <ErrorMessage message="Failed to load cities. Please try again." />
        </div>
      ) : (
        <section className="py-3">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            {/* Hero section */}
           {restaurant ? (
  <div className="relative mb-8 rounded-2xl overflow-hidden shadow-xl">
    <img
      src={restaurant.image || "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=600&fit=crop"}
      alt={restaurant.name || "Restaurant"}
      className="w-full h-96 object-cover"
    />
    <div className="absolute bottom-6 left-6 text-white">
      <h1 className="text-4xl font-bold mb-2">{restaurant.name}</h1>
    </div>
  </div>
) : (
  <Loader /> // ya koi error message
)}


            {/* Back button */}
            {/* Back button */}
        <div className="bg-white/90 backdrop-blur-sm border-b px-4 py-4">
          <button
            onClick={onBack}
            className="flex items-center gap-2 text-emerald-600 hover:text-emerald-700 font-semibold group"
          >
            <ChevronLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
            Back
          </button>
        </div>

            {/* Main content */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-6">
              <div className="lg:col-span-2 space-y-8">
                {/* About section */}
                <div className="bg-white rounded-2xl shadow-lg p-8">
                  <h2 className="text-2xl font-bold text-slate-900 mb-4">About This Restaurant</h2>
               {restaurant.description || "No description available."}


                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">

                    {/* Contact & Hours */}
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900 mb-4">Contact & Hours</h3>
                      <div className="space-y-3">
                        {(restaurant.contacts_and_hours || []).map((value, idx) => {
                          const contactTypes = ['phone', 'email', 'location', 'hours'];
                          const type = contactTypes[idx];
                          let Icon;
                          switch (type) {
                            case 'phone': Icon = Phone; break;
                            case 'email': Icon = Mail; break;
                            case 'location': Icon = MapPin; break;
                            case 'hours': Icon = Clock; break;
                            default: Icon = null;
                          }
                          return (
                            <div key={idx} className="flex items-center gap-3">
                              {Icon && (
                                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center">
                                  <Icon className="w-4 h-4 text-emerald-600" />
                                </div>
                              )}
                              <span className="text-slate-700">{value}</span>
                            </div>
                          );
                        })}
                      </div>


                    </div>


                    {/* Amenities */}
                    <div>
                      <h3 className="text-lg font-semibold text-slate-900 mb-4">Amenities</h3>
                      <div className="grid grid-cols-2 gap-3">
                        {restaurant.amenities?.map((amenity, index) => (
                          <div key={index} className="bg-slate-50 rounded-lg p-3 flex items-center gap-2">
                            {amenity === 'WiFi' && <Wifi className="w-4 h-4 text-blue-500" />}
                            {amenity === 'Parking' && <Car className="w-4 h-4 text-green-500" />}
                            {amenity === 'AC' && <div className="w-4 h-4 bg-cyan-500 rounded-full" />}
                            {!['WiFi', 'Parking', 'AC'].includes(amenity) && <div className="w-4 h-4 bg-orange-500 rounded-full" />}
                            <span className="text-slate-700 text-sm font-medium">{amenity}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Stats */}
                <div className="bg-white rounded-2xl shadow-lg p-8">
                  <h3 className="text-xl font-bold text-slate-900 mb-6">Restaurant Statistics</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">

                    {/* Room Status */}
                    <div className="bg-gradient-to-br from-emerald-50 to-teal-50 p-4 rounded-xl text-center border border-emerald-100">
                      <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-2">
                        <Bed className="w-4 h-4 text-emerald-600" />
                      </div>
                      <div className="absolute top-4 right-4">
                        <span
                          className={`flex items-center gap-1 px-3 py-1 rounded-full text-sm font-semibold backdrop-blur-sm ${restaurant.roomsAvailable
                              ? "bg-blue-100/90 text-blue-700"
                              : "bg-gray-100/90 text-gray-700"
                            }`}
                        >
                          <Bed className="w-4 h-4" />
                          {restaurant.roomsAvailable ? "Rooms Available" : "No Rooms"}
                        </span>
                      </div>
                      <div className="text-sm text-slate-600 mt-2">Room Status</div>
                    </div>

                    {/* Restaurant Type */}
                    <div className="bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-xl text-center border border-blue-100">
                      <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2">
                        <Award className="w-4 h-4 text-purple-600" />
                      </div>

                      <div className="text-xl font-bold text-orange-600">
                        {restaurant.restaurant_type}
                      </div>

                      <div className="text-sm text-slate-600 mt-2">Type</div>
                    </div>

                    {/* Active Status */}
                    <div className="bg-gradient-to-br from-orange-50 to-amber-50 p-4 rounded-xl text-center border border-orange-100">
                      <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-2">
                        <Shield className="w-4 h-4 text-orange-600" />
                      </div>
                      <div className="text-xl font-bold text-orange-600">
                        {restaurant.is_active ? "Active" : "Not Active"}
                      </div>
                      <div className="text-sm text-slate-600">Status</div>
                    </div>
                  </div>
                </div>

              </div>

              {/* Sidebar & Quick actions */}
              {/* Same as your current code, no changes needed, backend fields already mapped */}
              <div className="space-y-6">

                <div className="bg-gradient-to-br from-slate-50 to-blue-50 rounded-2xl p-6 border border-slate-200">
                  <h3 className="text-lg font-bold text-slate-900 mb-3">Need Help?</h3>
                  <p className="text-slate-600 text-sm mb-4">
                    Have questions about the menu, reservations, or special requests? Our friendly staff is here to help!
                  </p>
                  <div className="space-y-2">
                    {restaurant.whatsapp_link && (
                      <button
                        onClick={() =>
                          window.open(
                            `${restaurant.whatsapp_link}?text=Hi! I'm interested in your restaurant services.`,
                            "_blank"
                          )
                        }
                        className="group w-full relative overflow-hidden bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105"
                      >
                        <div className="absolute inset-0 bg-white/20 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 skew-x-12"></div>
                        <div className="relative flex items-center justify-center gap-3">
                          <MessageCircle className="w-5 h-5" />
                          <span>Chat on WhatsApp</span>
                        </div>
                      </button>
                    )}
                  </div>

                </div>
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-bold text-slate-900 mb-6">Quick Actions</h3>
                  <div className="space-y-4">


                    {restaurant.get_direction && (
                      <button
                        onClick={() => window.open(restaurant.get_direction, "_blank")}
                        className="group w-full relative overflow-hidden bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105"
                      >
                        <div className="absolute inset-0 bg-white/20 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 skew-x-12"></div>
                        <div className="relative flex items-center justify-center gap-3">
                          <Navigation className="w-5 h-5" />
                          <span>Get Directions</span>
                        </div>
                      </button>
                    )}


                    <button
                      onClick={() => setShowBookingForm(true)}
                      className="group w-full relative overflow-hidden bg-gradient-to-r from-purple-500 to-pink-600 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 hover:shadow-xl hover:scale-105"
                    >
                      <div className="absolute inset-0 bg-white/20 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700 skew-x-12"></div>
                      <div className="relative flex items-center justify-center gap-3">
                        <Calendar className="w-5 h-5" />
                        <span>Book Now</span>
                      </div>
                    </button>
                  </div>
                </div>



              </div>
            </div>
          </div>
        </section>
      )}



      {/* Booking Form */}
      <BookingForm
        isOpen={showBookingForm}
        onClose={() => setShowBookingForm(false)}
      />
    </div>
  );
};

export default RestaurantDetailPage;








// src/apiServer.js

import axios from 'axios';

const axiosInstance = axios.create({
//   baseURL: 'http://127.0.0.1:8000', 
  baseURL: 'http://localhost:8000', 
  timeout: 5000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, 
});


const apiServer = async (url, method = 'GET', data = {}) => {
  try {
    const config = {
      method,
      url,
      data,
    };

    const response = await axiosInstance(config);

    return {
      error: false,
      message: 'Success',
      data: response.data,
    };
  } catch (err) {
        console.error("API Error:", err.response?.data);
    return {
      error: true,
      message: err.response?.data?.message || err.response?.data?.detail || 'Something went wrong',

      status: err.response?.status || 500,
    };
  }
};

export default apiServer;


import React, { useState } from "react";
import { X } from "lucide-react";

const AddEditForm = ({ editingItem, setShowAddForm, restaurants, setRestaurants, products, setProducts }) => {
  const [formData, setFormData] = useState(() => {
    if (editingItem?.item) {
      return editingItem.item;
    }
    return editingItem?.type === 'restaurant' 
      ? {
          name: '',
          cuisine: '',
          location: '',
          image: '',
          description: ''
        }
      : {
          name: '',
          category: '',
          price: '',
          stock: '',
          image: '',
          description: ''
        };
  });

  const isEditing = !!editingItem?.item;
  const isRestaurant = editingItem?.type === 'restaurant';

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (isRestaurant) {
      if (isEditing) {
        setRestaurants(restaurants.map(r => 
          r.id === editingItem.item.id 
            ? { ...r, ...formData }
            : r
        ));
      } else {
        const newRestaurant = {
          ...formData,
          id: Date.now(),
          rating: 0,
          reviews: 0,
          status: 'Pending Review',
          revenue: 'Rs. 0/month'
        };
        setRestaurants([...restaurants, newRestaurant]);
      }
    } else {
      if (isEditing) {
        setProducts(products.map(p => 
          p.id === editingItem.item.id 
            ? { ...p, ...formData }
            : p
        ));
      } else {
        const newProduct = {
          ...formData,
          id: Date.now(),
          status: parseInt(formData.stock) > 0 ? 'In Stock' : 'Out of Stock',
          sales: 0
        };
        setProducts([...products, newProduct]);
      }
    }
    
    setShowAddForm(false);
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white border-b p-6 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {isEditing ? 'Edit' : 'Add'} {isRestaurant ? 'Restaurant' : 'Product'}
            </h2>
            <button 
              onClick={() => setShowAddForm(false)}
              className="text-gray-400 hover:text-gray-600 p-2"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              {isRestaurant ? 'Restaurant Name' : 'Product Name'}
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({...formData, name: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              placeholder={`Enter ${isRestaurant ? 'restaurant' : 'product'} name`}
              required
            />
          </div>

          {/* Restaurant specific fields */}
          {isRestaurant && (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Cuisine Type</label>
                <select
                  value={formData.cuisine}
                  onChange={(e) => setFormData({...formData, cuisine: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                  required
                >
                  <option value="">Select cuisine type</option>
                  <option value="Traditional Balti">Traditional Balti</option>
                  <option value="Local & Continental">Local & Continental</option>
                  <option value="International">International</option>
                  <option value="Fast Food">Fast Food</option>
                  <option value="Cafe & Snacks">Cafe & Snacks</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Location</label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) => setFormData({...formData, location: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                  placeholder="Enter restaurant location"
                  required
                />
              </div>
            </>
          )}

          {/* Product specific fields */}
          {!isRestaurant && (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData({...formData, category: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                  required
                >
                  <option value="">Select category</option>
                  <option value="Dry Fruits">Dry Fruits</option>
                  <option value="Handicrafts">Handicrafts</option>
                  <option value="Gemstones">Gemstones</option>
                  <option value="Traditional Clothes">Traditional Clothes</option>
                  <option value="Spices">Spices</option>
                </select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Price</label>
                  <input
                    type="text"
                    value={formData.price}
                    onChange={(e) => setFormData({...formData, price: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                    placeholder="e.g., Rs. 1,200/kg"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Stock Quantity</label>
                  <input
                    type="number"
                    value={formData.stock}
                    onChange={(e) => setFormData({...formData, stock: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
                    placeholder="0"
                    min="0"
                    required
                  />
                </div>
              </div>
            </>
          )}

          {/* Image URL */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Image URL</label>
            <input
              type="url"
              value={formData.image}
              onChange={(e) => setFormData({...formData, image: e.target.value})}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              placeholder="https://example.com/image.jpg"
              required
            />
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({...formData, description: e.target.value})}
              rows={4}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-colors"
              placeholder={`Describe your ${isRestaurant ? 'restaurant' : 'product'}...`}
            />
          </div>

          {/* Form Actions */}
          <div className="flex space-x-4 pt-4">
            <button
              type="button"
              onClick={() => setShowAddForm(false)}
              className="flex-1 bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="flex-1 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-3 px-6 rounded-lg font-semibold hover:shadow-lg transition-all duration-200"
            >
              {isEditing ? 'Update' : 'Add'} {isRestaurant ? 'Restaurant' : 'Product'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddEditForm;


<div className="hidden md:flex items-center space-x-4">
          
              <div className="relative">
                <button
                  onClick={() => setShowProfileDropdown(!showProfileDropdown)}
                  className="flex items-center space-x-2 p-2 rounded-full hover:bg-gray-100 transition-colors"
                >
                  <img
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face"
                    alt="Profile"
                    className="w-8 h-8 rounded-full"
                  />
                <span className="font-medium text-gray-700">
  Toursit Profile
</span> 

                  <svg
                    className="w-4 h-4 text-gray-500"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>

                {/* Profile Dropdown */}
                {showProfileDropdown && (
                  <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 py-2 z-50">
                    <button
                      onClick={() => {
                        navigate("/toursit-profile");
                        setShowProfileDropdown(false);
                      }}
                      className="flex items-center space-x-2 px-4 py-2 text-gray-700 hover:bg-emerald-50 hover:text-emerald-600 w-full text-left transition-colors"
                    >
                      <User className="h-4 w-4" />
                      <span>My Profile</span>
                    </button>
                    <hr className="my-2" />
                    <button
                      onClick={() => {
                        handleLogout();
                        setShowProfileDropdown(false);
                      }}
                      className="flex items-center space-x-2 px-4 py-2 text-red-600 hover:bg-red-50 w-full text-left transition-colors"
                    >
                      <svg
                        className="h-4 w-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H3" />
                      </svg>
                      <span>Logout</span>
                    </button>
                  </div>
                )}
              </div>
            
          </div>





            localStorage.setItem("user_role", user.role);
    localStorage.setItem("userName", user.username);
 
const roleData = localStorage.getItem("user_role");
// const usernameData = localStorage.getItem("username");
console.log("Stored role:", roleData);
// console.log("Stored username:", usernameData);

    console.log("localsorage saved role:".roledata)



     
   if (storedName) {
    setUserName(storedName);
  }
   const storedName = localStorage.getItem("userName");
   const [userName, setUserName] = useState("");
    console.log("stored name is :", storedName)


      // Sample restaurants data
  const [restaurants, setRestaurants] = useState([
    {
      id: 1,
      name: "Mountain View Restaurant",
      cuisine: "Local & Continental",
      location: "Skardu City Center",
      rating: 4.5,
      reviews: 128,
      image: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop",
      status: "Active",
      revenue: "Rs. 45,000/month"
    },
    {
      id: 2,
      name: "Balti Kitchen",
      cuisine: "Traditional Balti",
      location: "Old Skardu Market",
      rating: 4.7,
      reviews: 89,
      image: "https://images.unsplash.com/photo-1551218808-94e220e084d2?w=400&h=300&fit=crop",
      status: "Active",
      revenue: "Rs. 32,000/month"
    },
    {
      id: 3,
      name: "Glacier Cafe",
      cuisine: "Cafe & Snacks",
      location: "Near Satpara Lake",
      rating: 4.3,
      reviews: 67,
      image: "https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop",
      status: "Pending Review",
      revenue: "Rs. 18,000/month"
    }
  ]);

import React,{useState} from "react";
import { AddEditForm } from "../components";
import { Mail,  Phone, MapPin, Star, Calendar, Utensils , Package, ChevronRight, } from 'lucide-react';

const ProfilePage = ({ setCurrentPage }) => {
  const [activeTab, setActiveTab] = useState('restaurants');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);

  // Sample user data
  const userData = {
    name: "Ahmad Khan",
    email: "ahmad.khan@gbguide.com",
    phone: "+92 300 1234567",
    location: "Skardu, Baltistan",
    joinDate: "January 2024",
    userType: "Business Owner",
    bio: "Passionate about promoting local cuisine and authentic products from Gilgit-Baltistan. Running family business for over 15 years.",
    avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
    verified: true,
    stats: {
      restaurants: 3,
      products: 12,
      reviews: 45,
      rating: 4.8
    }
  };

  // Sample restaurants data
  const [restaurants, setRestaurants] = useState([
    {
      id: 1,
      name: "Mountain View Restaurant",
      cuisine: "Local & Continental",
      location: "Skardu City Center",
      rating: 4.5,
      reviews: 128,
      image: "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop",
      status: "Active",
      revenue: "Rs. 45,000/month"
    },
    {
      id: 2,
      name: "Balti Kitchen",
      cuisine: "Traditional Balti",
      location: "Old Skardu Market",
      rating: 4.7,
      reviews: 89,
      image: "https://images.unsplash.com/photo-1551218808-94e220e084d2?w=400&h=300&fit=crop",
      status: "Active",
      revenue: "Rs. 32,000/month"
    },
    {
      id: 3,
      name: "Glacier Cafe",
      cuisine: "Cafe & Snacks",
      location: "Near Satpara Lake",
      rating: 4.3,
      reviews: 67,
      image: "https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop",
      status: "Pending Review",
      revenue: "Rs. 18,000/month"
    }
  ]);

  // Sample products data
  const [products, setProducts] = useState([
    {
      id: 1,
      name: "Premium Apricots",
      category: "Dry Fruits",
      price: "Rs. 1,200/kg",
      stock: 50,
      image: "https://images.unsplash.com/photo-1605032687614-0e0e21a22750?w=300&h=300&fit=crop",
      status: "In Stock",
      sales: 145
    },
    {
      id: 2,
      name: "Traditional Shawl",
      category: "Handicrafts",
      price: "Rs. 3,500",
      stock: 12,
      image: "https://images.unsplash.com/photo-1594736797933-d0401ba2fe65?w=300&h=300&fit=crop",
      status: "Low Stock",
      sales: 23
    },
    {
      id: 3,
      name: "Ruby Gemstone",
      category: "Gemstones",
      price: "Rs. 8,000",
      stock: 8,
      image: "https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?w=300&h=300&fit=crop",
      status: "In Stock",
      sales: 12
    },
    {
      id: 4,
      name: "Walnuts Premium",
      category: "Dry Fruits",
      price: "Rs. 1,800/kg",
      stock: 0,
      image: "https://images.unsplash.com/photo-1608797178974-15b35a64ede6?w=300&h=300&fit=crop",
      status: "Out of Stock",
      sales: 89
    }
  ]);

  const handleDelete = (type, id) => {
    if (window.confirm(`Are you sure you want to delete this ${type}?`)) {
      if (type === 'restaurant') {
        setRestaurants(restaurants.filter(r => r.id !== id));
      } else {
        setProducts(products.filter(p => p.id !== id));
      }
    }
  };

  const handleEdit = (type, item) => {
    setEditingItem({ type, item });
    setShowAddForm(true);
  };

  const handleAdd = (type) => {
    setEditingItem({ type, item: null });
    setShowAddForm(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-emerald-50">
      {/* Profile Header */}
      <section className="bg-white shadow-lg">
           <div
          className="absolute  h-[400px] inset-0 bg-cover bg-center opacity-40 "
          style={{
            backgroundImage: "url('https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1920&h=600&fit=crop')",
            height:400
          }}
        ></div>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          <div className="flex flex-col lg:flex-row items-center lg:items-start space-y-6 lg:space-y-0 lg:space-x-8">
           
            {/* Profile Picture */}
            <div className="relative">
              <div className="w-32 h-32 rounded-full overflow-hidden ring-4 ring-emerald-500 ring-offset-4">
                <img 
                  src={userData.avatar} 
                  alt={userData.name}
                  className="w-full h-full object-cover"
                />
              </div>
              {userData.verified && (
                <div className="absolute -bottom-2 -right-2 bg-emerald-500 text-white p-2 rounded-full">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
              )}
            </div>

            {/* Profile Info */}
            <div className="flex-1 text-center lg:text-left">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-4">
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 mb-2">{userData.name}</h1>
                  <div className="flex items-center justify-center lg:justify-start space-x-2 mb-2">
                    <span className="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm font-semibold">
                      {userData.userType}
                    </span>
                    {userData.verified && (
                      <span className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-semibold">
                        Verified
                      </span>
                    )}
                  </div>
                </div>
                <button className="bg-gradient-to-r from-emerald-900 to-teal-900 text-white px-6 py-2 rounded-full font-semibold hover:shadow-lg transition-all duration-200">
                  Edit Profile
                </button>
              </div>

              <p className="text-gray-900 mb-4 max-w-2xl">{userData.bio}</p>

              {/* Contact Info */}
              <div className="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-6 text-gray-900 mb-6">
                <div className="flex items-center justify-center lg:justify-start space-x-2">
                  <Mail className="h-4 w-4" />
                  <span>{userData.email}</span>
                </div>
                <div className="flex items-center justify-center lg:justify-start space-x-2  text-gray-900">
                  <Phone className="h-4 w-4" />
                  <span>{userData.phone}</span>
                </div>
                <div className="flex items-center justify-center lg:justify-start space-x-2  text-gray-900">
                  <MapPin className="h-4 w-4" />
                  <span>{userData.location}</span>
                </div>
              </div>

              {/* Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-emerald-50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-emerald-600">{userData.stats.restaurants}</div>
                  <div className="text-sm text-gray-600">Restaurants</div>
                </div>
                <div className="bg-blue-200 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-gray-600">{userData.stats.products}</div>
                  <div className="text-sm text-gray-600">Products</div>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-purple-600">{userData.stats.reviews}</div>
                  <div className="text-sm text-gray-600">Reviews</div>
                </div>
                <div className="bg-orange-50 p-4 rounded-lg text-center">
                  <div className="text-2xl font-bold text-orange-600">{userData.stats.rating}</div>
                  <div className="text-sm text-gray-600">Rating</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Tabs Navigation */}
      <section className="bg-white border-t sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            <button
              onClick={() => setActiveTab('restaurants')}
              className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-semibold transition-colors ${
                activeTab === 'restaurants'
                  ? 'border-emerald-500 text-emerald-600'
                  : 'border-transparent text-gray-600 hover:text-emerald-600'
              }`}
            >
              <Utensils className="h-5 w-5" />
              <span>My Restaurants ({restaurants.length})</span>
            </button>
            <button
              onClick={() => setActiveTab('products')}
              className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-semibold transition-colors ${
                activeTab === 'products'
                  ? 'border-emerald-500 text-emerald-600'
                  : 'border-transparent text-gray-600 hover:text-emerald-600'
              }`}
            >
              <Package className="h-5 w-5" />
              <span>My Products ({products.length})</span>
            </button>
          </div>
        </div>
      </section>

      {/* Content */}
      <section className="py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          
          {/* Restaurants Tab */}
          {activeTab === 'restaurants' && (
            <div>
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
                <h2 className="text-3xl font-bold text-gray-900 mb-4 sm:mb-0">My Restaurants</h2>
                <button 
                  onClick={() => handleAdd('restaurant')}
                  className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg transition-all duration-200 flex items-center space-x-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                  <span>Add Restaurant</span>
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {restaurants.map((restaurant) => (
                  <div key={restaurant.id} className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
                    <div className="relative h-48">
                      <img 
                        src={restaurant.image} 
                        alt={restaurant.name}
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute top-4 right-4">
                        <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          restaurant.status === 'Active' 
                            ? 'bg-green-100 text-green-700'
                            : 'bg-yellow-100 text-yellow-700'
                        }`}>
                          {restaurant.status}
                        </span>
                      </div>
                    </div>
                    
                    <div className="p-6">
                      <h3 className="text-xl font-bold text-gray-900 mb-2">{restaurant.name}</h3>
                      <p className="text-gray-600 mb-2">{restaurant.cuisine}</p>
                      <div className="flex items-center text-gray-600 mb-3">
                        <MapPin className="h-4 w-4 mr-1" />
                        <span className="text-sm">{restaurant.location}</span>
                      </div>
                      
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center space-x-1">
                          <Star className="h-4 w-4 text-yellow-400 fill-current" />
                          <span className="font-semibold">{restaurant.rating}</span>
                          <span className="text-gray-500 text-sm">({restaurant.reviews})</span>
                        </div>
                        <div className="text-emerald-600 font-semibold text-sm">
                          {restaurant.revenue}
                        </div>
                      </div>

                      <div className="flex space-x-2">
                        <button 
                          onClick={() => handleEdit('restaurant', restaurant)}
                          className="flex-1 bg-emerald-600 text-white py-2 px-4 rounded-lg hover:bg-emerald-700 transition-colors text-sm font-semibold"
                        >
                          Edit
                        </button>
                        <button 
                          onClick={() => handleDelete('restaurant', restaurant.id)}
                          className="flex-1 bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors text-sm font-semibold"
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {restaurants.length === 0 && (
                <div className="text-center py-16">
                  <Utensils className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-gray-600 mb-2">No restaurants yet</h3>
                  <p className="text-gray-500 mb-6">Start by adding your first restaurant</p>
                  <button 
                    onClick={() => handleAdd('restaurant')}
                    className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg transition-all duration-200"
                  >
                    Add Your First Restaurant
                  </button>
                </div>
              )}
            </div>
          )}

          {/* Products Tab */}
          {activeTab === 'products' && (
            <div>
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
                <h2 className="text-3xl font-bold text-gray-900 mb-4 sm:mb-0">My Products</h2>
                <button 
                  onClick={() => handleAdd('product')}
                  className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg transition-all duration-200 flex items-center space-x-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                  <span>Add Product</span>
                </button>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {products.map((product) => (
                  <div key={product.id} className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
                    <div className="relative h-48">
                      <img 
                        src={product.image} 
                        alt={product.name}
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute top-4 right-4">
                        <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                          product.status === 'In Stock' 
                            ? 'bg-green-100 text-green-700'
                            : product.status === 'Low Stock'
                            ? 'bg-yellow-100 text-yellow-700'
                            : 'bg-red-100 text-red-700'
                        }`}>
                          {product.status}
                        </span>
                      </div>
                      <div className="absolute top-4 left-4">
                        <span className="bg-emerald-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                          {product.category}
                        </span>
                      </div>
                    </div>
                    
                    <div className="p-4">
                      <h3 className="text-lg font-bold text-gray-900 mb-2">{product.name}</h3>
                      <div className="flex items-center justify-between mb-3">
                        <span className="text-xl font-bold text-emerald-600">{product.price}</span>
                        <span className="text-sm text-gray-600">Stock: {product.stock}</span>
                      </div>
                      <div className="text-sm text-gray-600 mb-4">
                        Sales: {product.sales} units
                      </div>

                      <div className="flex space-x-2">
                        <button 
                          onClick={() => handleEdit('product', product)}
                          className="flex-1 bg-emerald-600 text-white py-2 px-3 rounded-lg hover:bg-emerald-700 transition-colors text-sm font-semibold"
                        >
                          Edit
                        </button>
                        <button 
                          onClick={() => handleDelete('product', product.id)}
                          className="flex-1 bg-red-600 text-white py-2 px-3 rounded-lg hover:bg-red-700 transition-colors text-sm font-semibold"
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {products.length === 0 && (
                <div className="text-center py-16">
                  <Package className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-gray-600 mb-2">No products yet</h3>
                  <p className="text-gray-500 mb-6">Start by adding your first product</p>
                  <button 
                    onClick={() => handleAdd('product')}
                    className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg transition-all duration-200"
                  >
                    Add Your First Product
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </section>

      {/* Add/Edit Form Modal */}
      {showAddForm && (
        <AddEditForm 
          editingItem={editingItem}
          setShowAddForm={setShowAddForm}
          restaurants={restaurants}
          setRestaurants={setRestaurants}
          products={products}
          setProducts={setProducts}
        />
      )}
    </div>
  );
};

export default ProfilePage;


// src/components/TouristPlacesTab.jsx
import React,{useState} from 'react';
import { MapPin } from 'lucide-react';
import Loader from './common/Loader';
import ErrorMessage from './common/ErrorMessage';
import useTouristPlaces from '../hooks/useTouristPlaces';

const TouristPlacesTab = ({ cityId, cityName }) => {
  const { touristPlaces, touristPlaceLoading, touristPlaceError } = useTouristPlaces(cityId);


const [expandedCards, setExpandedCards] = useState({});

const toggleDescription = (id) => {
  setExpandedCards((prev) => ({
    ...prev,
    [id]: !prev[id],
  }));
};


  return (
    <div>
      <h2 className="text-3xl font-bold text-gray-900 mb-8">
        Tourist Places in {cityName}
      </h2>

      {/* Loading State */}
      {touristPlaceLoading ? (
        <div className="flex justify-center py-16">
          <Loader />
        </div>
      ) : touristPlaceError ? (
        // Error state
      <ErrorMessage message="Unable to load Toursit places. Please try again." />
      ) : touristPlaces.length === 0 ? (
        // Empty State
        <div className="text-center py-16">
          <div className="w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
            <MapPin className="h-12 w-12 text-gray-400" />
          </div>
          <h3 className="text-xl font-semibold text-gray-700 mb-2">
            No Tourist Places found
          </h3>
          <h3 className="text-gray-500 mb-2">
            Try adjusting your search or check back later for updates.
          </h3>
        </div>
      ) : (
        // Data Grid
        <div className="grid grid-cols-3 md:grid-cols-2 gap-6">
          {touristPlaces.map((place, index) => (
            <div
              key={index}
              className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow"
            >
              <div className="md:flex">
                {/* Image */}
                <div className="md:w-1/2">
                  <img
                    src={place.image}
                    alt={place.name}
                    className="w-full h-48 md:h-full object-cover"
                  />
                </div>

                {/* Content */}
                <div className="md:w-1/2  p-6 flex flex-col justify-between">
                  {/* Name */}
                  <h3 className="text-xl font-bold text-gray-900 mb-3">
                    {place.name}
                  </h3>

 {/* Location inside city */}
  {place.location_inside_city && (
    <div className="flex items-center text-gray-600 text-sm mb-2 ">
      <MapPin className="h-4 w-4 mr-1 text-emerald-500" />
      <span>{place.location_inside_city}</span>
    </div>
  )}

  {/* Distance from main city */}
  {place.distance_from_main_city && (
    <p className="text-gray-500 text-sm mb-4">
      Distance from city : {place.distance_from_main_city}
    </p>
  )}
                  {/* Description */}
     <p className={`${expandedCards[place.id] ? '' : 'line-clamp-2'} text-gray-600 mb-3`}>
  {place.short_description}
</p>
<button 
  onClick={() => toggleDescription(place.id)} 
  className="text-emerald-600 text-sm font-semibold hover:underline"
>
  {expandedCards[place.id] ? 'Read Less ‚Üë' : 'Read More ‚Üì'}
</button> 




                  {/* Get Directions Button */}
                  {place.map_url && (
                    <a
                      href={place.map_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="w-full bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-2 rounded-lg font-semibold hover:shadow-lg transition-all text-center block"
                    >
                      Get Directions
                    </a>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default TouristPlacesTab;
